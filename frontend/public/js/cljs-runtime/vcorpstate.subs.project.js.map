{"version":3,"sources":["vcorpstate/subs/project.cljs"],"mappings":";AASA,2DAAA,3DAACA,iLAEA,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,2DAAA,hMAACC,+CAAOF;;AAEX,2DAAA,3DAACD,6KAEA,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,2DAAA,hMAACC,+CAAOF;;AAEX,2DAAA,3DAACD,kKAEA,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,2DAAA,hMAACC,+CAAOF;;AAEX,2DAAA,3DAACD,qKAEA,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,2DAAA,hMAACC,+CAAOF;;AAEX,2DAAA,3DAACD,mKAEA,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,2DAAA,hMAACC,+CAAOF;;AAGX,2DAAA,3DAACD,+KAEA,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,mDAAA,xLAACC,+CAAOF;;AAEX,2DAAA,3DAACD,yKAEA,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,mDAAA,xLAACC,+CAAOF;;AAMX,2DAAA,3DAACD,gMAEA,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,gEAAA,rMAACC,+CAAOF;;AAEX,2DAAA,3DAACD,+LAEA,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,gEAAA,rMAACC,+CAAOF;;AAOX,2DAAA,+HAAA,gDAAA,mFAAA,4EAAA,gDAAA,mFAAA,5gBAACD,ykBAIA,WAAAI,SAAwBF;AAAxB,AAAA,IAAAG,aAAAD;kBAAA,AAAAE,4CAAAD,WAAA,IAAA,zEAAME;WAAN,AAAAD,4CAAAD,WAAA,IAAA,lEAAkBG;AAAlB,AACE,IAAAC,oBAAK,AAACC,oBAAUH;AAAhB,AAAA,oBAAAE;AAA6B,OAACC,oBAAUF;;AAAxCC;;;AAGH,2DAAA,sHAAA,gDAAA,mFAAA,4EAAA,gDAAA,mFAAA,wEAAA,gDAAA,mFAAA,9sBAACT,2wBAKA,WAAAW,SAAkCT;AAAlC,AAAA,IAAAU,aAAAD;kBAAA,AAAAL,4CAAAM,WAAA,IAAA,zEAAML;gBAAN,AAAAD,4CAAAM,WAAA,IAAA,vEAAkBC;WAAlB,AAAAP,4CAAAM,WAAA,IAAA,lEAA4BJ;AAA5B,AACE,IAAMM,oBAAkB,AAACC,gBAAMR;IACzBS,kBAAgB,AAACD,gBAAMF;IACvBI,aAAW,AAACF,gBAAMP;IAClBU,iBAAe,AAACH,gBAAM,+CAAA,WAAAI,1DAACC;AAAD,AAAS,OAAA,6FAAY,iBAAAD,jBAACE;GAAWb;IACvDc,sBAAoB,mBAAA,nBAACC,6EAAiB,AAACC,eAAKX;AAJlD,AAAA,kDAAA,iGAAA,4FAAA,4EAAA,wFAAA,kMAAA,wNAAA,sMAAA,l3BAKsBC,8FACFE,iFACLC,oFACIC,uFACA,AAACH,gBAAM,gEAAA,OAAA,vEAACU,4CAAIH,qJACL,AAACP,gBAAM,gEAAA,cAAA,9EAACU,4CAAIH,gJAClB,AAACP,gBAAM,gEAAA,QAAA,xEAACU,4CAAIH,6IACV,AAACP,gBAAM,gEAAA,UAAA,1EAACU,4CAAIH","names":["re_frame.core.reg_sub","db","_","cljs.core.get_in","p__12405","vec__12406","cljs.core.nth","collections","jobs","and__5000__auto__","cljs.core/not-empty","p__12412","vec__12413","documents","total-collections","cljs.core/count","total-documents","total-jobs","completed-jobs","p1__12411#","cljs.core.filter","cljs.core/second","documents-by-status","cljs.core/group-by","cljs.core/vals","cljs.core.get"],"sourcesContent":["(ns vcorpstate.subs.project\n  \"Project data subscriptions - used by all components\"\n  (:require [re-frame.core :as rf]))\n\n;; ====================================\n;; PROJECT DATA SUBSCRIPTIONS\n;; ====================================\n\n;; Project data subscriptions (used by graph, sidebar, etc.)\n(rf/reg-sub\n :collections\n (fn [db _]\n   (get-in db [:project :collections])))\n\n(rf/reg-sub\n :documents\n (fn [db _]\n   (get-in db [:project :documents])))\n\n(rf/reg-sub\n :jobs\n (fn [db _]\n   (get-in db [:project :jobs])))\n\n(rf/reg-sub\n :squads\n (fn [db _]\n   (get-in db [:project :squads])))\n\n(rf/reg-sub\n :roles\n (fn [db _]\n   (get-in db [:project :roles])))\n\n;; App-level subscriptions\n(rf/reg-sub\n :app/loading?\n (fn [db _]\n   (get-in db [:app :loading?])))\n\n(rf/reg-sub\n :app/error\n (fn [db _]\n   (get-in db [:app :error])))\n\n;; ====================================\n;; WEBSOCKET SUBSCRIPTIONS\n;; ====================================\n\n(rf/reg-sub\n :websocket/connected?\n (fn [db _]\n   (get-in db [:websocket :connected?])))\n\n(rf/reg-sub\n :websocket/last-event\n (fn [db _]\n   (get-in db [:websocket :last-event])))\n\n;; ====================================\n;; COMPUTED SUBSCRIPTIONS\n;; ====================================\n\n;; Check if project has data loaded\n(rf/reg-sub\n :project/has-data?\n :<- [:collections]\n :<- [:jobs]\n (fn [[collections jobs] _]\n   (and (not-empty collections) (not-empty jobs))))\n\n;; Project statistics\n(rf/reg-sub\n :project/stats\n :<- [:collections]\n :<- [:documents] \n :<- [:jobs]\n (fn [[collections documents jobs] _]\n   (let [total-collections (count collections)\n         total-documents (count documents)\n         total-jobs (count jobs)\n         completed-jobs (count (filter #(:completed (second %)) jobs))\n         documents-by-status (group-by :status (vals documents))]\n     {:total-collections total-collections\n      :total-documents total-documents\n      :total-jobs total-jobs\n      :completed-jobs completed-jobs\n      :documents-done (count (get documents-by-status \"done\" []))\n      :documents-in-progress (count (get documents-by-status \"in_progress\" []))\n      :documents-ready (count (get documents-by-status \"ready\" []))\n      :documents-blocked (count (get documents-by-status \"blocked\" []))})))"]}