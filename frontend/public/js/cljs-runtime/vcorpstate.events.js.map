{"version":3,"sources":["vcorpstate/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","_","vcorpstate.db/default-db","re_frame.core.reg_event_fx","p__12496","map__12497","cljs.core/--destructure-map","cljs.core.get","db","cljs.core.assoc","vcorpstate.config/config","ajax.core/json-request-format","ajax.core/json-response-format","p__12498","p__12499","map__12500","vec__12501","cljs.core.nth","projects","updated-db","pending-route","cljs.core.dissoc","cljs.core.get_in","p__12504","vec__12505","error","p__12508","vec__12509","project-id","cljs.core.println","cljs.core/type","p__12512","vec__12513","new-db","p__12516","vec__12517","view","p__12520","vec__12521","route","p__12524","p__12525","map__12526","vec__12527","p__12530","vec__12531","section","current-section","cljs.core._EQ_"],"sourcesContent":["(ns vcorpstate.events\n  (:require [re-frame.core :as rf]\n            [ajax.core :as ajax]\n            [day8.re-frame.http-fx]\n            [vcorpstate.config :as config]\n            [vcorpstate.db :as db]))\n\n;; Initialize app state\n(rf/reg-event-db\n :initialize-db\n (fn [_ _]\n   db/default-db))\n\n;; Fetch projects from backend\n(rf/reg-event-fx\n :fetch-projects\n (fn [{:keys [db]} _]\n   {:db (assoc db :loading? true :error nil)\n    :http-xhrio {:method :get\n                 :uri (str (:backend-url config/config) (:api-base config/config) \"/projects\")\n                 :format (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success [:fetch-projects-success]\n                 :on-failure [:fetch-projects-failure]}}))\n\n;; Handle successful projects fetch\n(rf/reg-event-fx\n :fetch-projects-success\n (fn [{:keys [db]} [_ projects]]\n   (let [updated-db (assoc db\n                           :loading? false\n                           :projects projects\n                           :error nil)\n         pending-route (:pending-route db)]\n     (if pending-route\n       ;; We have a pending route, try to navigate to it now\n       {:db (dissoc updated-db :pending-route)\n        :dispatch [:navigate-to-project-by-id (get-in pending-route [:params :id])]}\n       ;; No pending route, just update the db\n       {:db updated-db}))))\n\n;; Handle failed projects fetch\n(rf/reg-event-db\n :fetch-projects-failure\n (fn [db [_ error]]\n   (assoc db\n          :loading? false\n          :error \"Failed to fetch projects\")))\n\n;; Set selected project\n(rf/reg-event-db\n :set-selected-project\n (fn [db [_ project-id]]\n   (println \"set-selected-project event received with project-id:\" project-id)\n   (println \"Type of project-id:\" (type project-id))\n   (assoc db :selected-project-id project-id)))\n\n;; Navigate to main view with selected project\n(rf/reg-event-db\n :navigate-to-main\n (fn [db [_ project-id]]\n   (println \"navigate-to-main event received with project-id:\" project-id)\n   (println \"Current db:\" db)\n   (let [new-db (assoc db \n                       :current-view :main\n                       :selected-project-id project-id)]\n     (println \"New db:\" new-db)\n     new-db)))\n\n;; Set current view\n(rf/reg-event-db\n :set-current-view\n (fn [db [_ view]]\n   (assoc db :current-view view)))\n\n;; Set current route\n(rf/reg-event-db\n :set-route\n (fn [db [_ route]]\n   (assoc db :current-route route)))\n\n;; Navigate to project by ID from URL\n(rf/reg-event-fx\n :navigate-to-project-by-id\n (fn [{:keys [db]} [_ project-id]]\n   ;; Force navigation to main view regardless of project loading status\n   ;; This ensures the sidebar is always shown when accessing /project/:id\n   {:db (assoc db \n               :current-view :main\n               :selected-project {:id project-id :name \"Test VCorp Project\"}\n               :selected-project-id project-id\n               :current-route {:name :project :params {:id project-id}})}))\n\n;; Navigate to home\n(rf/reg-event-db\n :navigate-to-home\n (fn [db _]\n   (assoc db \n          :current-view :project-selector\n          :selected-project-id nil\n          :current-route {:name :home})))\n\n;; Toggle sidebar section\n(rf/reg-event-db\n :toggle-sidebar-section\n (fn [db [_ section]]\n   (let [current-section (:expanded-sidebar-section db)]\n     (assoc db :expanded-sidebar-section \n            (if (nil? section) \n              nil  ; Always close when section is nil\n              (if (= current-section section) nil section))))))"]}