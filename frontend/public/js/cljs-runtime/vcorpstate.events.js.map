{"version":3,"sources":["vcorpstate/events.cljs"],"mappings":";AAOA,yDAAA,zDAACA,+HAEA,WAAKC,EAAEA;AAAP,AAAA,kDAAA,2DAAA,KAAA,6DAAA,MAAA,uDAAA;;AAMD,yDAAA,zDAACC,6HAEA,WAAKD,EAAEA;AAAP,AAAA,kDAAA,gDAAA,2CAAA,6DAAA,KAAA,uDAAA,KAAA,2DAAA,aAAA,iEAAA,2CAAA,uDAAA,mDAAA,gZAAA,0FAAA,iOAAA,iEAAA,mFAAA,2FAAA,gEAAA,mFAAA,1hCAGqB,0UAAA,7RAAK,AAAA,iGAAcE,uEAAe,AAAA,0FAAWA,wGAC1C,AAACC,2GACQ,+BAAA,2CAAA,8DAAA,xIAACC;;AAKnC,yDAAA,zDAACL,4IAEA,cAAAM,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASN;eAAT,AAAAO,4CAAAD,WAAA,IAAA,tEAAWG;AAAX,AACE,+DAAA,6DAAA,wDAAA,8JAAA,uDAAA,lYAACC,qDAAMF,mLAES,AAAA,yFAAUC;;AAI7B,yDAAA,zDAACV,4IAEA,cAAAY,HAAKH;AAAL,AAAA,IAAAI,aAAAD;QAAA,AAAAJ,4CAAAK,WAAA,IAAA,/DAASZ;YAAT,AAAAO,4CAAAK,WAAA,IAAA,nEAAWC;AAAX,AACE,+DAAA,6DAAA,wDAAA,uDAAA,uCAAA,2DAAA,tUAACH,qDAAMF","names":["re_frame.core.reg_event_db","_","re_frame.core.reg_event_fx","vcorpstate.config/config","ajax.core/json-request-format","ajax.core/json-response-format","p__23608","vec__23609","cljs.core.nth","db","response","cljs.core.assoc","p__23615","vec__23616","error"],"sourcesContent":["(ns vcorpstate.events\n  (:require [re-frame.core :as rf]\n            [ajax.core :as ajax]\n            [day8.re-frame.http-fx]\n            [vcorpstate.config :as config]))\n\n;; Initialize app state\n(rf/reg-event-db\n :initialize-db\n (fn [_ _]\n   {:message nil\n    :loading? false\n    :error nil}))\n\n;; Fetch hello world message\n(rf/reg-event-fx\n :fetch-hello\n (fn [_ _]\n   {:db {:loading? true :error nil :message nil}\n    :http-xhrio {:method :get\n                 :uri (str (:backend-url config/config) (:api-base config/config) \"/hello\")\n                 :format (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success [:fetch-hello-success]\n                 :on-failure [:fetch-hello-failure]}}))\n\n;; Handle successful response\n(rf/reg-event-db\n :fetch-hello-success\n (fn [db [_ response]]\n   (assoc db\n          :loading? false\n          :message (:message response)\n          :error nil)))\n\n;; Handle error response\n(rf/reg-event-db\n :fetch-hello-failure\n (fn [db [_ error]]\n   (assoc db\n          :loading? false\n          :error \"Failed to fetch message from backend\"\n          :message nil)))"]}