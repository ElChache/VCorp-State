{"version":3,"sources":["vcorpstate/subs/graph.cljs"],"mappings":"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","names":["re_frame.core.reg_sub","db","_","cljs.core.get_in","collections","documents","jobs","squads","roles","vcorpstate.graph/build-graph-data","graph-data","p__14938","vec__14939","cljs.core.nth","and__5000__auto__","cljs.core/not-empty","p__14943","vec__14944","total-collections","cljs.core/count","total-documents","total-jobs","completed-jobs","p1__14942#","cljs.core.filter","cljs.core/second","documents-by-status","cljs.core/group-by","cljs.core/vals","cljs.core.get"],"sourcesContent":["(ns vcorpstate.subs.graph\n  \"Graph-related subscriptions\"\n  (:require [re-frame.core :as rf]\n            [vcorpstate.graph :as graph]))\n\n;; ====================================\n;; GRAPH DATA SUBSCRIPTIONS\n;; ====================================\n\n;; Basic graph data subscriptions\n(rf/reg-sub\n :graph/collections\n (fn [db _]\n   (get-in db [:graph :collections])))\n\n(rf/reg-sub\n :graph/documents\n (fn [db _]\n   (get-in db [:graph :documents])))\n\n(rf/reg-sub\n :graph/jobs\n (fn [db _]\n   (get-in db [:graph :jobs])))\n\n(rf/reg-sub\n :graph/squads\n (fn [db _]\n   (get-in db [:graph :squads])))\n\n(rf/reg-sub\n :graph/roles\n (fn [db _]\n   (get-in db [:graph :roles])))\n\n(rf/reg-sub\n :graph/loading?\n (fn [db _]\n   (get-in db [:graph :loading?])))\n\n(rf/reg-sub\n :graph/connected?\n (fn [db _]\n   (get-in db [:graph :connected?])))\n\n;; ====================================\n;; WEBSOCKET SUBSCRIPTIONS\n;; ====================================\n\n(rf/reg-sub\n :websocket/connected?\n (fn [db _]\n   (get-in db [:websocket :connected?])))\n\n(rf/reg-sub\n :websocket/last-event\n (fn [db _]\n   (get-in db [:websocket :last-event])))\n\n;; ====================================\n;; COMPUTED GRAPH SUBSCRIPTIONS\n;; ====================================\n\n;; Build React Flow graph data from current state\n(rf/reg-sub\n :graph/react-flow-data\n (fn [db _]\n   (let [collections (get-in db [:graph :collections])\n         documents (get-in db [:graph :documents])\n         jobs (get-in db [:graph :jobs])\n         squads (get-in db [:graph :squads])\n         roles (get-in db [:graph :roles])]\n     (graph/build-graph-data collections documents jobs squads roles))))\n\n;; Get nodes for React Flow\n(rf/reg-sub\n :graph/nodes\n :<- [:graph/react-flow-data]\n (fn [graph-data _]\n   (:nodes graph-data)))\n\n;; Get edges for React Flow\n(rf/reg-sub\n :graph/edges\n :<- [:graph/react-flow-data]\n (fn [graph-data _]\n   (:edges graph-data)))\n\n;; Check if graph has data\n(rf/reg-sub\n :graph/has-data?\n :<- [:graph/collections]\n :<- [:graph/jobs]\n (fn [[collections jobs] _]\n   (and (not-empty collections) (not-empty jobs))))\n\n;; Graph statistics\n(rf/reg-sub\n :graph/stats\n :<- [:graph/collections]\n :<- [:graph/documents] \n :<- [:graph/jobs]\n (fn [[collections documents jobs] _]\n   (let [total-collections (count collections)\n         total-documents (count documents)\n         total-jobs (count jobs)\n         completed-jobs (count (filter #(:completed (second %)) jobs))\n         documents-by-status (group-by :status (vals documents))]\n     {:total-collections total-collections\n      :total-documents total-documents\n      :total-jobs total-jobs\n      :completed-jobs completed-jobs\n      :documents-done (count (get documents-by-status \"done\" []))\n      :documents-in-progress (count (get documents-by-status \"in_progress\" []))\n      :documents-ready (count (get documents-by-status \"ready\" []))\n      :documents-blocked (count (get documents-by-status \"blocked\" []))})))"]}