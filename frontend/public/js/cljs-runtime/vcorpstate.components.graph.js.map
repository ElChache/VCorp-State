{"version":3,"sources":["vcorpstate/components/graph.cljs"],"mappings":"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","names":["vcorpstate.components.graph/render-job-level","jobs-map","jobs-by-slug","level","cljs.core/not-empty","cljs.core.map","p__12625","vec__12626","cljs.core.nth","job-slug","_children","job","cljs.core.get","and__5000__auto__","cljs.core._EQ_","input","or__5002__auto__","output","all-children","cljs.core.apply","cljs.core/merge","cljs.core/vals","vcorpstate.components.graph/squad-column","squad-data","map__12629","cljs.core/--destructure-map","squad","jobs","cljs.core/deref","re_frame.core.subscribe","vcorpstate.components.graph/graph-component","loading?","graph-structure","has-graph-structure?","cljs.core/count","cljs.core.map_indexed","idx"],"sourcesContent":["(ns vcorpstate.components.graph\n  (:require [re-frame.core :as rf]))\n\n(defn render-job-level\n  \"Renders a single level of jobs horizontally (side by side)\"\n  [jobs-map jobs-by-slug level]\n  (when (not-empty jobs-map)\n    [:div {:class \"mb-4\"}\n     ;; Current level jobs rendered horizontally and centered\n     [:div {:class \"flex justify-center\"\n            :style {:gap \"0.5rem\"}}\n      (map (fn [[job-slug _children]]\n             (let [job (get jobs-by-slug job-slug)]\n               ^{:key (str level \"-\" job-slug)}\n               [:div {:class \"flex flex-col items-center\"}\n                ;; Input documents (above job) - only for level 0 (root jobs)\n                (when (and (= level 0) (not-empty (:inputs job)))\n                  [:div {:class \"flex justify-center mb-1\"\n                         :style {:gap \"0.5rem\"}}\n                   (map (fn [input]\n                          ^{:key (str job-slug \"-input-\" (:slug input))}\n                          [:div {:class \"bg-blue-100 border border-blue-300 rounded px-3 py-2 text-sm\"}\n                           [:div {:class \"font-medium text-blue-800\"}\n                            (:slug input)]])\n                        (:inputs job))])\n                \n                ;; Job box\n                [:div {:class \"bg-orange-100 border border-orange-400 rounded px-3 py-2 text-sm\"}\n                 [:div {:class \"font-medium text-orange-800\"}\n                  (or (:name job) job-slug)]]\n                \n                ;; Output documents (below job)\n                (when (not-empty (:outputs job))\n                  [:div {:class \"flex justify-center mt-1\"\n                         :style {:gap \"0.5rem\"}}\n                   (map (fn [output]\n                          ^{:key (str job-slug \"-output-\" (:slug output))}\n                          [:div {:class \"bg-green-100 border border-green-300 rounded px-3 py-2 text-sm\"}\n                           [:div {:class \"font-medium text-green-800\"}\n                            (:slug output)]])\n                        (:outputs job))])]))\n           jobs-map)]\n     ;; Recursively render next level - collect all children from current level\n     (let [all-children (apply merge (vals jobs-map))]\n       [render-job-level all-children jobs-by-slug (inc level)])]))\n\n(defn squad-column\n  \"Renders a single squad column with title and jobs\"\n  [squad-data]\n  (let [{:keys [squad jobs]} squad-data]\n    [:div {:class \"flex-shrink-0 min-w-0 mx-2\"}\n     [:div {:class \"bg-white border border-gray-200 rounded-lg shadow-sm min-h-96\"}\n      ;; Squad title - subtle like in reference\n      [:div {:class \"px-3 py-2 border-b border-gray-100\"}\n       [:h3 {:class \"text-xs font-medium text-gray-400 uppercase tracking-wide\"}\n        (str squad \" Squad\")]]\n      \n      ;; Jobs content area\n      [:div {:class \"p-3\"}\n       (let [jobs-by-slug @(rf/subscribe [:data/jobs-by-slug])]\n         [render-job-level jobs jobs-by-slug 0])]]]))\n\n(defn graph-component\n  []\n  (let [loading? @(rf/subscribe [:app/loading?])\n        graph-structure @(rf/subscribe [:data/graph-structure])\n        has-graph-structure? (and graph-structure (pos? (count graph-structure)))]\n    [:div {:class \"relative w-full h-full bg-gray-50 overflow-auto\"}\n     (cond \n       loading? [:div {:class \"flex items-center justify-center h-full\"}\n                 [:div {:class \"text-gray-600\"} \"Loading project data...\"]]\n       has-graph-structure? \n       [:div {:class \"p-4\"}\n        ;; Horizontal scrollable container for columns\n        [:div {:class \"flex items-start overflow-x-auto pb-4\"}\n         (map-indexed \n           (fn [idx squad-data]\n             ^{:key (str \"squad-\" idx \"-\" (:squad squad-data))}\n             [squad-column squad-data])\n           graph-structure)]]\n       :else [:div {:class \"flex items-center justify-center h-full\"}\n              [:div {:class \"text-gray-500\"} \"No project data available\"]])]))"]}