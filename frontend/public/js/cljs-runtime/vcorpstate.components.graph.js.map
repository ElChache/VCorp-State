{"version":3,"sources":["vcorpstate/components/graph.cljs"],"mappings":"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","names":["vcorpstate.components.graph/get-collection-border-class","collections-by-slug","slug","collection","cljs.core.get","has-path?","and__5000__auto__","vcorpstate.components.graph/render-job-level","jobs-map","jobs-by-slug","level","cljs.core/not-empty","cljs.core.map","p__12574","vec__12575","cljs.core.nth","job-slug","_children","job","cljs.core._EQ_","input","border-class","all-ready?","ready-count","total-count","bg-class","re-frame.core/dispatch","or__5002__auto__","output","all-children","cljs.core.apply","cljs.core/merge","cljs.core/vals","vcorpstate.components.graph/squad-column","squad-data","map__12578","cljs.core/--destructure-map","squad","jobs","cljs.core/deref","re_frame.core.subscribe","collections-with-stats","vcorpstate.components.graph/graph-component","loading?","graph-structure","has-graph-structure?","cljs.core/count","cljs.core.map_indexed","idx"],"sourcesContent":["(ns vcorpstate.components.graph\n  (:require [re-frame.core :as rf]))\n\n(defn get-collection-border-class\n  \"Returns CSS class for collection border based on whether it has a path\"\n  [collections-by-slug slug]\n  (let [collection (get collections-by-slug slug)\n        has-path? (and collection (:path collection))]\n    (if has-path? \"collection-with-path\" \"collection-without-path\")))\n\n(defn render-job-level\n  \"Renders a single level of jobs horizontally (side by side)\"\n  [jobs-map jobs-by-slug collections-by-slug level]\n  (when (not-empty jobs-map)\n    [:div {:class \"mb-4\"}\n     ;; Current level jobs rendered horizontally and centered\n     [:div {:class \"flex justify-center\"\n            :style {:gap \"0.5rem\"}}\n      (map (fn [[job-slug _children]]\n             (let [job (get jobs-by-slug job-slug)]\n               ^{:key (str level \"-\" job-slug)}\n               [:div {:class \"flex flex-col items-center\"}\n                ;; Input documents (above job) - only for level 0 (root jobs)\n                (when (and (= level 0) (not-empty (:inputs job)))\n                  [:div {:class \"flex justify-center mb-1\"\n                         :style {:gap \"0.5rem\"}}\n                   (map (fn [input]\n                          (let [collection (get collections-by-slug (:slug input))\n                                border-class (get-collection-border-class collections-by-slug (:slug input))\n                                all-ready? (:all-documents-ready? collection false)\n                                ready-count (:ready-documents collection 0)\n                                total-count (:total-documents collection 0)\n                                bg-class (if all-ready? \"bg-blue-200\" \"bg-blue-100\")]\n                            ^{:key (str job-slug \"-input-\" (:slug input))}\n                            [:div {:class (str bg-class \" rounded px-3 py-2 text-sm cursor-pointer \" border-class)\n                                   :on-click #(rf/dispatch [:show-document-dialog (:slug input)])}\n                             [:div {:class \"font-medium text-blue-800\"}\n                              (str (:slug input) \" \" ready-count \"/\" total-count)]]))\n                        (:inputs job))])\n                \n                ;; Job box\n                [:div {:class \"bg-orange-100 border border-orange-400 rounded px-3 py-2 text-sm\"}\n                 [:div {:class \"font-medium text-orange-800\"}\n                  (or (:name job) job-slug)]]\n                \n                ;; Output documents (below job)\n                (when (not-empty (:outputs job))\n                  [:div {:class \"flex justify-center mt-1\"\n                         :style {:gap \"0.5rem\"}}\n                   (map (fn [output]\n                          (let [collection (get collections-by-slug (:slug output))\n                                border-class (get-collection-border-class collections-by-slug (:slug output))\n                                all-ready? (:all-documents-ready? collection false)\n                                ready-count (:ready-documents collection 0)\n                                total-count (:total-documents collection 0)\n                                bg-class (if all-ready? \"bg-green-200\" \"bg-green-100\")]\n                            ^{:key (str job-slug \"-output-\" (:slug output))}\n                            [:div {:class (str bg-class \" rounded px-3 py-2 text-sm cursor-pointer \" border-class)\n                                   :on-click #(rf/dispatch [:show-document-dialog (:slug output)])}\n                             [:div {:class \"font-medium text-green-800\"}\n                              (str (:slug output) \" \" ready-count \"/\" total-count)]]))\n                        (:outputs job))])]))\n           jobs-map)]\n     ;; Recursively render next level - collect all children from current level\n     (let [all-children (apply merge (vals jobs-map))]\n       [render-job-level all-children jobs-by-slug collections-by-slug (inc level)])]))\n\n(defn squad-column\n  \"Renders a single squad column with title and jobs\"\n  [squad-data]\n  (let [{:keys [squad jobs]} squad-data]\n    [:div {:class \"flex-shrink-0 min-w-0 mx-2\"}\n     [:div {:class \"bg-white border border-gray-200 rounded-lg shadow-sm min-h-96\"}\n      ;; Squad title - subtle like in reference\n      [:div {:class \"px-3 py-2 border-b border-gray-100\"}\n       [:h3 {:class \"text-xs font-medium text-gray-400 uppercase tracking-wide\"}\n        (str squad \" Squad\")]]\n      \n      ;; Jobs content area\n      [:div {:class \"p-3\"}\n       (let [jobs-by-slug @(rf/subscribe [:data/jobs-by-slug])\n             collections-with-stats @(rf/subscribe [:data/collections-with-stats])]\n         [render-job-level jobs jobs-by-slug collections-with-stats 0])]]]))\n\n(defn graph-component\n  []\n  (let [loading? @(rf/subscribe [:app/loading?])\n        graph-structure @(rf/subscribe [:data/graph-structure])\n        has-graph-structure? (and graph-structure (pos? (count graph-structure)))]\n    [:div {:class \"relative w-full h-full bg-gray-50 overflow-auto\"}\n     (cond \n       loading? [:div {:class \"flex items-center justify-center h-full\"}\n                 [:div {:class \"text-gray-600\"} \"Loading project data...\"]]\n       has-graph-structure? \n       [:div {:class \"p-4\"}\n        ;; Horizontal scrollable container for columns\n        [:div {:class \"flex items-start overflow-x-auto pb-4\"}\n         (map-indexed \n           (fn [idx squad-data]\n             ^{:key (str \"squad-\" idx \"-\" (:squad squad-data))}\n             [squad-column squad-data])\n           graph-structure)]]\n       :else [:div {:class \"flex items-center justify-center h-full\"}\n              [:div {:class \"text-gray-500\"} \"No project data available\"]])]))"]}