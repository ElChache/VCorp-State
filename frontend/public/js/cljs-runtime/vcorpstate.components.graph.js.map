{"version":3,"sources":["vcorpstate/components/graph.cljs"],"mappings":";AAGA;;;+CAAA,/CAAMA,sGAEHC,SAASC,aAAaC;AAFzB,AAGE,oBAAM,AAACC,oBAAUH;AAAjB,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,eAAA,mFAAA,mDAAA,2CAAA,wDAAA,sBAAA,uDAAA,2CAAA,iDAAA,yBAKI,AAACI,4CAAI,WAAAC;AAAA,AAAA,IAAAC,aAAAD;eAAA,AAAAE,4CAAAD,WAAA,IAAA,tEAAME;gBAAN,AAAAD,4CAAAD,WAAA,IAAA,vEAAeG;AAAf,AACE,IAAMC,MAAI,AAACC,4CAAIV,aAAaO;AAA5B,AAAA,2BAAA,mFAAA,mDAAA,2CAAA,wDAAA,2EAAA,mFAAA,mDAAA,2CAAA,wDAAA,sCAII,iBAAAI,mBAAI,AAAA,mFAAOF;AAAX,AAAA,oBAAAE;AAAAA;;AAAgBJ;;qBAJpB,2CAAA,oDACS,oDAAA,PAAKN,uDAAUM;GAI1BR,kBAEN,iBAAMa,eAAa,AAACC,8CAAMC,gBAAM,AAACC,eAAKhB;AAAtC,AAAA,0FACGD,6CAAiBc,aAAaZ,aAAa,SAAA,RAAKC;;;AAdtD;;;AAgBF;;;2CAAA,3CAAMe,8FAEHC;AAFH,AAGE,IAAAC,aAA2BD;IAA3BC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAR,4CAAAQ,eAAA,nEAAcE;WAAd,AAAAV,4CAAAQ,eAAA,lEAAoBG;AAApB,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,qCAAA,mFAAA,mDAAA,2CAAA,wDAAA,wEAAA,mFAAA,mDAAA,2CAAA,wDAAA,6CAAA,mFAAA,iDAAA,2CAAA,wDAAA,2JAAA,mFAAA,mDAAA,2CAAA,wDAAA,hUAMM,oDAAA,PAAKD,iSAIN,gCAAA,AAAAE,fAAMtB,+BAAc,sDAAA,mFAAA,zIAACuB;AAArB,AAAA,yJAAA,/DACGzB,6CAAiBuB,KAAKrB;;;AAEhC,8CAAA,9CAAMwB;AAAN,AAEE,qBAAA,AAAAF,jBAAMG,iCAAU,sDAAA,mFAAA,zIAACF;sBAAjB,AAAAD,lBACMI,kCAAiB,sDAAA,mFAAA,zIAACH;IAClBI,6BAAqB,iBAAAC,oBAAKF;AAAL,AAAA,oBAAAE;AAAqB,2CAAA,nCAAM,AAACC,gBAAMH;;AAAlCE;;;AAF3B,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,0DAIG,kCAAA,mFAAA,mDAAA,2CAAA,wDAAA,kDAAA,mFAAA,mDAAA,2CAAA,wDAAA,wBAAA,0CAAA,8CAAA,mFAAA,mDAAA,2CAAA,wDAAA,cAAA,mFAAA,mDAAA,2CAAA,wDAAA,pmCACEH,wmBAEAE,4iBAIE,AAACG,oDACC,WAAKC,IAAId;AAAT,AAAA,2BAAA,+IAAA,2CAAA,oDACS,CAAA,0DAAA,LAAcc,qDAAQ,AAAA,qFAAQd,3VACpCD,yCAAaC;oCAVtB,AAAA,mFAAA,mDAAA,2CAAA,wDAAA,kDAAA,mFAAA,mDAAA,2CAAA,wDAAA,wBAAA,7jBAWMS","names":["vcorpstate.components.graph/render-job-level","jobs-map","jobs-by-slug","level","cljs.core/not-empty","cljs.core.map","p__12541","vec__12542","cljs.core.nth","job-slug","_children","job","cljs.core.get","or__5002__auto__","all-children","cljs.core.apply","cljs.core/merge","cljs.core/vals","vcorpstate.components.graph/squad-column","squad-data","map__12545","cljs.core/--destructure-map","squad","jobs","cljs.core/deref","re_frame.core.subscribe","vcorpstate.components.graph/graph-component","loading?","graph-structure","has-graph-structure?","and__5000__auto__","cljs.core/count","cljs.core.map_indexed","idx"],"sourcesContent":["(ns vcorpstate.components.graph\n  (:require [re-frame.core :as rf]))\n\n(defn render-job-level\n  \"Renders a single level of jobs horizontally (side by side)\"\n  [jobs-map jobs-by-slug level]\n  (when (not-empty jobs-map)\n    [:div {:class \"mb-4\"}\n     ;; Current level jobs rendered horizontally and centered\n     [:div {:class \"flex justify-center\"\n            :style {:gap \"0.5rem\"}}\n      (map (fn [[job-slug _children]]\n             (let [job (get jobs-by-slug job-slug)]\n               ^{:key (str level \"-\" job-slug)}\n               [:div {:class \"bg-orange-100 border border-orange-400 rounded px-3 py-2 text-sm\"}\n                [:div {:class \"font-medium text-orange-800\"}\n                 (or (:name job) job-slug)]]))\n           jobs-map)]\n     ;; Recursively render next level - collect all children from current level\n     (let [all-children (apply merge (vals jobs-map))]\n       [render-job-level all-children jobs-by-slug (inc level)])]))\n\n(defn squad-column\n  \"Renders a single squad column with title and jobs\"\n  [squad-data]\n  (let [{:keys [squad jobs]} squad-data]\n    [:div {:class \"flex-shrink-0 min-w-0 mx-2\"}\n     [:div {:class \"bg-white border border-gray-200 rounded-lg shadow-sm min-h-96\"}\n      ;; Squad title - subtle like in reference\n      [:div {:class \"px-3 py-2 border-b border-gray-100\"}\n       [:h3 {:class \"text-xs font-medium text-gray-400 uppercase tracking-wide\"}\n        (str squad \" Squad\")]]\n      \n      ;; Jobs content area\n      [:div {:class \"p-3\"}\n       (let [jobs-by-slug @(rf/subscribe [:data/jobs-by-slug])]\n         [render-job-level jobs jobs-by-slug 0])]]]))\n\n(defn graph-component\n  []\n  (let [loading? @(rf/subscribe [:app/loading?])\n        graph-structure @(rf/subscribe [:data/graph-structure])\n        has-graph-structure? (and graph-structure (pos? (count graph-structure)))]\n    [:div {:class \"relative w-full h-full bg-gray-50 overflow-auto\"}\n     (cond \n       loading? [:div {:class \"flex items-center justify-center h-full\"}\n                 [:div {:class \"text-gray-600\"} \"Loading project data...\"]]\n       has-graph-structure? \n       [:div {:class \"p-4\"}\n        ;; Horizontal scrollable container for columns\n        [:div {:class \"flex items-start overflow-x-auto pb-4\"}\n         (map-indexed \n           (fn [idx squad-data]\n             ^{:key (str \"squad-\" idx \"-\" (:squad squad-data))}\n             [squad-column squad-data])\n           graph-structure)]]\n       :else [:div {:class \"flex items-center justify-center h-full\"}\n              [:div {:class \"text-gray-500\"} \"No project data available\"]])]))"]}