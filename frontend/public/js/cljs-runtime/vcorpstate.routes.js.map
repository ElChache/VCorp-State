{"version":3,"sources":["vcorpstate/routes.cljs"],"mappings":";AAIA,AAAA,8BAAA,sCAAAA,pEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,4DAAA,5DAAMD;AAAN,AAEG,OAACE,0DAAUC;;;AAFd,CAAA,4DAAA,5DAAMH,uEAGFI;AAHJ,AAAA;AAKG,IAAMC,OAAK,iBAAAC,mBAAIF;AAAJ,AAAA,oBAAAE;AAAAA;;AAAQH;;;IACbE,WAAK,EAAI,uCAAA,vCAACE,kCAAiBF,WAAU,kDAAA,lDAACG,6CAAKH,UAAQA;AADzD,AAEE,GACE,EAAI,AAACI,uBAAOJ,eAAM,sDAAA,tDAACK,6CAAEL;AADvB,kDAAA,qDAAA;;AAAA,GAEE,2CAAA,3CAACE,kCAAiBF;AAClB,IAAMM,SAAO,kEAAIN,nDAAK,4DAAA,5DAACO,fAAgBC;AAAvC,AACE,IAAAC,qBAAY,AAACE,qBAAWL;AAAxB,AAAA,oBAAAG;AAAA,SAAAA,LAASC;AAAT,AAAA,kDAAA,qDAAA,2DAAA,wDAAA,2CAAA,kDAC+BA;;AAD/B,kDAAA,qDAAA;;;AAJJ,AAAA,kDAAA,qDAAA;;;;;;AAPL,CAAA,sDAAA,tDAAMf;;AAAN,AAgBA,wCAAA,xCAAMiB;AAAN,AAAA;AAEE,IAAMC,QAAM,AAAChB;AAAb,AACE,IAAAiB,WAAM,AAAA,mFAAOD;IAAbC,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACQ,8BAAA,mFAAA,1GAACE;;;KADT;AAEW,8BAAA,mFAAA,1GAACA,wMAAwC,qDAAA,mFAAA,wDAAA,hMAACC,+CAAOJ;;;;AAF5D,MAAA,KAAAjB,MAAA,CAAA,mEAAAkB;;;;AAIJ,4CAAA,5CAAMI,gGAAoBL;AAA1B,AAAA;AAEE,IAAMM,OAAK,iBAAAC,WAAM,AAAA,mFAAOP;IAAbO,eAAA,EAAA,CAAAA,oBAAAL,oBAAA,AAAAK,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA;;;KAAA;AAEW,QAAA,yDAAkB,qDAAA,mFAAA,wDAAA,hMAACH,+CAAOJ;;;;AAFrC,MAAA,KAAAjB,MAAA,CAAA,mEAAAwB;;;;AAAX,AAGE,CAAMtB,uBAAwBqB;;AAC9B,OAACP;;AAEL,sCAAA,tCAAMS;AAAN,AAAA;AAGE,AAACT;;AAGD,wBAAA,xBAAmBU,mCAAqBV;;AACxC,+BAAA,xBAAmBU,qCAAuBV","names":["var_args","G__12456","vcorpstate.routes/parse-url","js/Error","vcorpstate.routes.parse_url","js/window.location.hash","url","path","or__5002__auto__","clojure.string/starts-with?","cljs.core.subs","cljs.core/empty?","cljs.core._EQ_","id-str","clojure.string.split","cljs.core/last","temp__5802__auto__","id","cljs.core/parse-long","vcorpstate.routes/handle-route-change","route","G__12457","cljs.core/Keyword","re-frame.core/dispatch","cljs.core.get_in","vcorpstate.routes/navigate-to-route!","hash","G__12458","vcorpstate.routes/init-routes!","js/window"],"sourcesContent":["(ns vcorpstate.routes\n  (:require [re-frame.core :as rf]\n            [clojure.string :as str]))\n\n(defn parse-url \n  ([]\n   (parse-url js/window.location.hash))\n  ([url]\n   \"Parse URL and return route info\"\n   (let [path (or url js/window.location.hash)\n         path (if (str/starts-with? path \"#\") (subs path 1) path)]\n     (cond\n       (or (empty? path) (= path \"/\")) {:name :home}\n       (str/starts-with? path \"/project/\") \n       (let [id-str (-> path (str/split #\"/\") last)]\n         (if-let [id (parse-long id-str)]\n           {:name :project :params {:id id}}\n           {:name :home}))\n       :else {:name :home}))))\n\n(defn handle-route-change []\n  \"Handle route changes and dispatch appropriate events\"\n  (let [route (parse-url)]\n    (case (:name route)\n      :home (rf/dispatch [:navigate-to-home])\n      :project (rf/dispatch [:navigate-to-project-by-id (get-in route [:params :id])]))))\n\n(defn navigate-to-route! [route]\n  \"Navigate to a route and update browser history\"\n  (let [hash (case (:name route)\n               :home \"#/\"\n               :project (str \"#/project/\" (get-in route [:params :id])))]\n    (set! js/window.location.hash hash)\n    (handle-route-change)))\n\n(defn init-routes! []\n  \"Initialize routing\"\n  ;; Handle initial page load\n  (handle-route-change)\n  \n  ;; Handle browser back/forward buttons and hash changes\n  (.addEventListener js/window \"popstate\" handle-route-change)\n  (.addEventListener js/window \"hashchange\" handle-route-change))"]}