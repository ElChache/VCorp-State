{"version":3,"sources":["vcorpstate/events/data.cljs"],"mappings":";AAUA,yDAAA,zDAACA,qIAEA,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaK;IAAbF,aAAAJ;QAAA,AAAAK,4CAAAD,WAAA,IAAA,/DAAmBG;iBAAnB,AAAAF,4CAAAD,WAAA,IAAA,xEAAqBI;AAArB,AAAA,kDAAA,uRAAA,wEAAA,mFAAA,2CAAA,kDAAA,MAAA,6DAAA,mFAAA,rnBACO,sBAAA,mFAAA,mDAAA,qEAAA,jOAACC,mBAASH,irBAC2CE;;AAG7D,yDAAA,zDAACV,wIAEA,aAAAY,FAAKH;AAAL,AAAA,IAAAI,aAAAD;YAAA,AAAAL,4CAAAM,WAAA,IAAA,nEAAQJ;iBAAR,AAAAF,4CAAAM,WAAA,IAAA,xEAAUH;AAAV,AACE,AAACI,0CAA+BJ;;AADlC;;AAKD,yDAAA,zDAACK,wIAEA,cAAAC,HAAKR;AAAL,AAAA,IAAAS,aAAAD;QAAA,AAAAT,4CAAAU,WAAA,IAAA,/DAASR;WAAT,AAAAF,4CAAAU,WAAA,IAAA,lEAAWC;AAAX,AACE,IAAAC,aAAkED;IAAlEC,iBAAA,AAAAf,4BAAAe;kBAAA,AAAAd,4CAAAc,eAAA,zEAAcC;gBAAd,AAAAf,4CAAAc,eAAA,vEAA0BE;WAA1B,AAAAhB,4CAAAc,eAAA,lEAAoCG;aAApC,AAAAjB,4CAAAc,eAAA,pEAAyCI;YAAzC,AAAAlB,4CAAAc,eAAA,nEAAgDK;gBAAhD,AAAAnB,4CAAAc,eAAA,vEAAsDM;IAEhDC,oBAAkB,6CAAA,7CAACC,gFAAQ,AAACC,4CAAI,WAAKC;AAAL,AAAA,0FAAS,AAAA,gFAAKA,GAAGA;IAAKT;IACtDU,kBAAgB,6CAAA,7CAACH,gFAAQ,AAACC,4CAAI,WAAKG;AAAL,AAAA,0FAAS,AAAA,gFAAKA,GAAGA;IAAKV;IACpDW,aAAW,6CAAA,7CAACL,gFAAQ,AAACC,4CAAI,WAAKK;AAAL,AAAA,0FAAS,AAAA,gFAAKA,GAAGA;IAAKX;IAC/CY,eAAa,6CAAA,7CAACP,gFAAQ,AAACC,4CAAI,WAAKO;AAAL,AAAA,0FAAS,AAAA,gFAAKA,GAAGA;IAAKZ;IACjDa,sBAAoB,6CAAA,7CAACT,gFAAQ,AAACC,4CAAI,WAAKS;AAAL,AAAA,0FAAS,AAAA,+FAAaA,GAAGA;IAAKb;AANtE,4IAOMhB,nBACA,sBAAA,mFAAA,qDAAA,9JAACG,0OAA8Be,7PAC/B,gRAAA,mFAAA,qDAAA,xZAACf,geAA4BmB,nfAC7B,ogBAAA,mFAAA,qDAAA,5oBAACnB,ysBAAuBqB,5tBACxB,wuBAAA,mFAAA,qDAAA,h3BAACrB,g7BAAyBuB,n8BAC1B,i9BAAA,mFAAA,qDAAA,zlCAACvB,upCAAwByB,1qCACzB,+rCAAA,mFAAA,mDAAA,qEAAA,14CAACzB,1BACD,26CAAA,mFAAA,qDAAA,5iDAACA,ynDAA+Bc;;AAGzC,yDAAA,zDAACV,wIAEA,cAAAuB,HAAK9B;AAAL,AAAA,IAAA+B,aAAAD;QAAA,AAAA/B,4CAAAgC,WAAA,IAAA,/DAAS9B;YAAT,AAAAF,4CAAAgC,WAAA,IAAA,nEAAWC;AAAX,6CACMhC,nBACA,sBAAA,mFAAA,mDAAA,qEAAA,jOAACG,1BACD,kQAAA,mFAAA,mDAAA,+DAAA,hcAACA;;AAOR,yDAAA,zDAACI,2JAEA,cAAA0B,HAAKjC;AAAL,AAAA,IAAAkC,aAAAD;QAAA,AAAAlC,4CAAAmC,WAAA,IAAA,/DAASjC;YAAT,AAAAF,4CAAAmC,WAAA,IAAA,nEAAWC;AAAX,AACE,IAAAC,aAAuCD;IAAvCC,iBAAA,AAAAxC,4BAAAwC;kBAAA,AAAAvC,4CAAAuC,eAAA,zEAAcC;iBAAd,AAAAxC,4CAAAuC,eAAA,xEAA0BE;AAA1B,AACE,6BAAA,mFAAA,qDAAA,4EAAA,1OAACnC,mBAASH,2MAAqBqC,8EAAqBC;;AAGzD,yDAAA,zDAAC/B,iJAEA,cAAAgC,HAAKvC;AAAL,AAAA,IAAAwC,aAAAD;QAAA,AAAAxC,4CAAAyC,WAAA,IAAA,/DAASvC;YAAT,AAAAF,4CAAAyC,WAAA,IAAA,nEAAWL;AAAX,AACE,IAAAM,aAAwCN;IAAxCM,iBAAA,AAAA7C,4BAAA6C;aAAA,AAAA5C,4CAAA4C,eAAA,pEAAcC;gBAAd,AAAA7C,4CAAA4C,eAAA,vEAAqBE;aAArB,AAAA9C,4CAAA4C,eAAA,pEAA+BG;AAA/B,6CACM5C,nBACA,sBAAA,mFAAA,qDAAA,4DAAA,1NAACG,mNAAsBuC,8EAAmBC,3TAC1C,sUAAA,mFAAA,qDAAA,4DAAA,ngBAACxC,4fAAsBuC,yEAAgBE;;AAGhD,yDAAA,zDAACrC,mKAEA,cAAAsC,HAAK7C;AAAL,AAAA,IAAA8C,aAAAD;QAAA,AAAA9C,4CAAA+C,WAAA,IAAA,/DAAS7C;YAAT,AAAAF,4CAAA+C,WAAA,IAAA,nEAAWX;AAAX,AACE,IAAAY,aAA8CZ;IAA9CY,iBAAA,AAAAnD,4BAAAmD;oBAAA,AAAAlD,4CAAAkD,eAAA,3EAAcC;gBAAd,AAAAnD,4CAAAkD,eAAA,vEAA4BJ;YAA5B,AAAA9C,4CAAAkD,eAAA,nEAAsCE;AAAtC,AACE,6BAAA,mFAAA,qDAAA,kFAAA,oEAAA,2CAAA,yEAAA,xaAAC9C,mBAASH,+MAAuBgD,4LACXL,iEAAiBM;;AAG5C,yDAAA,zDAAC1C,6IAEA,cAAA2C,HAAKlD;AAAL,AAAA,IAAAmD,aAAAD;QAAA,AAAAnD,4CAAAoD,WAAA,IAAA,/DAASlD;YAAT,AAAAF,4CAAAoD,WAAA,IAAA,nEAAWhB;AAAX,AACE,IAAAiB,aAAyBjB;IAAzBiB,iBAAA,AAAAxD,4BAAAwD;mBAAA,AAAAvD,4CAAAuD,eAAA,1EAAcC;AAAd,AACE,6BAAA,mFAAA,qDAAA,9JAAClD,mBAASH,2MAAqB,AAAA,gFAAKqD,sBAAWA","names":["re_frame.core.reg_event_fx","p__12575","p__12576","map__12577","cljs.core/--destructure-map","cljs.core.get","vec__12578","cljs.core.nth","db","_","project-id","cljs.core/assoc-in","p__12581","vec__12582","vcorpstate.http/load-project-initial-data","re_frame.core.reg_event_db","p__12585","vec__12586","data","map__12589","collections","documents","jobs","squads","roles","timestamp","collections-by-id","cljs.core.into","cljs.core.map","c","documents-by-id","d","jobs-by-id","j","squads-by-id","s","roles-by-short-name","r","p__12590","vec__12591","error","p__12594","vec__12595","event","map__12598","document_id","new_status","p__12599","vec__12600","map__12603","job_id","completed","paused","p__12604","vec__12605","map__12608","collection_id","total","p__12609","vec__12610","map__12613","document"],"sourcesContent":["(ns vcorpstate.events.data\n  \"Data loading and real-time update events\"\n  (:require [re-frame.core :as rf]\n            [vcorpstate.http :as http]))\n\n;; ====================================\n;; PROJECT DATA LOADING\n;; ====================================\n\n;; Load all project data when project is accessed\n(rf/reg-event-fx\n :data/load-project\n (fn [{:keys [db]} [_ project-id]]\n   {:db (assoc-in db [:app :loading?] true)\n    :dispatch-later [{:ms 100 :dispatch [:data/fetch-project project-id]}]}))\n\n;; HTTP call to fetch project data\n(rf/reg-event-fx\n :data/fetch-project\n (fn [_ [_ project-id]]\n   (http/load-project-initial-data project-id)\n   {}))\n\n;; Handle successful project data load\n(rf/reg-event-db\n :data/project-loaded\n (fn [db [_ data]]\n   (let [{:keys [collections documents jobs squads roles timestamp]} data\n         ;; Normalize data by ID for fast lookups\n         collections-by-id (into {} (map (fn [c] [(:id c) c])) collections)\n         documents-by-id (into {} (map (fn [d] [(:id d) d])) documents) \n         jobs-by-id (into {} (map (fn [j] [(:id j) j])) jobs)\n         squads-by-id (into {} (map (fn [s] [(:id s) s])) squads)\n         roles-by-short-name (into {} (map (fn [r] [(:short_name r) r])) roles)]\n     (-> db\n         (assoc-in [:data :collections] collections-by-id)\n         (assoc-in [:data :documents] documents-by-id)\n         (assoc-in [:data :jobs] jobs-by-id)\n         (assoc-in [:data :squads] squads-by-id)\n         (assoc-in [:data :roles] roles-by-short-name)\n         (assoc-in [:app :loading?] false)\n         (assoc-in [:data :last-updated] timestamp)))))\n\n;; Handle failed project data load\n(rf/reg-event-db\n :data/project-failed\n (fn [db [_ error]]\n   (-> db\n       (assoc-in [:app :loading?] false)\n       (assoc-in [:app :error] \"Failed to load project data\"))))\n\n;; ====================================\n;; REAL-TIME DATA UPDATES\n;; ====================================\n\n;; Handle document status changes\n(rf/reg-event-db\n :data/document-status-changed\n (fn [db [_ event]]\n   (let [{:keys [document_id new_status]} event]\n     (assoc-in db [:data :documents document_id :status] new_status))))\n\n;; Handle job status changes\n(rf/reg-event-db\n :data/job-status-changed\n (fn [db [_ event]]\n   (let [{:keys [job_id completed paused]} event]\n     (-> db\n         (assoc-in [:data :jobs job_id :completed] completed)\n         (assoc-in [:data :jobs job_id :paused] paused)))))\n\n;; Handle collection progress updates\n(rf/reg-event-db\n :data/collection-progress-updated\n (fn [db [_ event]]\n   (let [{:keys [collection_id completed total]} event]\n     (assoc-in db [:data :collections collection_id :progress] \n               {:completed completed :total total}))))\n\n;; Handle new document creation\n(rf/reg-event-db\n :data/document-created\n (fn [db [_ event]]\n   (let [{:keys [document]} event]\n     (assoc-in db [:data :documents (:id document)] document))))"]}