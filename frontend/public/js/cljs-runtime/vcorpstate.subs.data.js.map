{"version":3,"sources":["vcorpstate/subs/data.cljs"],"mappings":";AASA,2DAAA,3DAACA,wLAEA,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,qDAAA,1LAACC,+CAAOF;;AAEX,2DAAA,3DAACD,oLAEA,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,qDAAA,1LAACC,+CAAOF;;AAEX,2DAAA,3DAACD,yKAEA,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,qDAAA,1LAACC,+CAAOF;;AAEX,2DAAA,3DAACD,4KAEA,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,qDAAA,1LAACC,+CAAOF;;AAEX,2DAAA,3DAACD,0KAEA,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,qDAAA,1LAACC,+CAAOF;;AAOX,2DAAA,3DAACD,8LAEA,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,qDAAA,1LAACC,+CAAOF;;AAGX,2DAAA,qHAAA,gDAAA,mFAAA,mFAAA,gDAAA,mFAAA,zgBAACD,6kBAIA,WAAAI,SAAwBF;AAAxB,AAAA,IAAAG,aAAAD;kBAAA,AAAAE,4CAAAD,WAAA,IAAA,zEAAME;WAAN,AAAAD,4CAAAD,WAAA,IAAA,lEAAkBG;AAAlB,AACE,IAAAC,oBAAK,AAACC,oBAAUH;AAAhB,AAAA,oBAAAE;AAA6B,OAACC,oBAAUF;;AAAxCC;;;AAGH,2DAAA,+GAAA,gDAAA,mFAAA,mFAAA,gDAAA,mFAAA,+EAAA,gDAAA,mFAAA,rtBAACT,yxBAKA,WAAAW,SAAkCT;AAAlC,AAAA,IAAAU,aAAAD;kBAAA,AAAAL,4CAAAM,WAAA,IAAA,zEAAML;gBAAN,AAAAD,4CAAAM,WAAA,IAAA,vEAAkBC;WAAlB,AAAAP,4CAAAM,WAAA,IAAA,lEAA4BJ;AAA5B,AACE,IAAMM,oBAAkB,AAACC,gBAAMR;IACzBS,kBAAgB,AAACD,gBAAMF;IACvBI,aAAW,AAACF,gBAAMP;IAClBU,iBAAe,AAACH,gBAAM,+CAAA,WAAAI,1DAACC;AAAD,AAAS,OAAA,6FAAY,iBAAAD,jBAACE;GAAWb;IACvDc,sBAAoB,mBAAA,nBAACC,6EAAiB,AAACC,eAAKX;AAJlD,AAAA,kDAAA,iGAAA,4FAAA,4EAAA,wFAAA,kMAAA,wNAAA,sMAAA,l3BAKsBC,8FACFE,iFACLC,oFACIC,uFACA,AAACH,gBAAM,gEAAA,OAAA,vEAACU,4CAAIH,qJACL,AAACP,gBAAM,gEAAA,cAAA,9EAACU,4CAAIH,gJAClB,AAACP,gBAAM,gEAAA,QAAA,xEAACU,4CAAIH,6IACV,AAACP,gBAAM,gEAAA,UAAA,1EAACU,4CAAIH","names":["re_frame.core.reg_sub","db","_","cljs.core.get_in","p__12537","vec__12538","cljs.core.nth","collections","jobs","and__5000__auto__","cljs.core/not-empty","p__12542","vec__12543","documents","total-collections","cljs.core/count","total-documents","total-jobs","completed-jobs","p1__12541#","cljs.core.filter","cljs.core/second","documents-by-status","cljs.core/group-by","cljs.core/vals","cljs.core.get"],"sourcesContent":["(ns vcorpstate.subs.data\n  \"Data subscriptions - collections, documents, jobs, etc.\"\n  (:require [re-frame.core :as rf]))\n\n;; ====================================\n;; DATA SUBSCRIPTIONS\n;; ====================================\n\n;; Raw data subscriptions\n(rf/reg-sub\n :data/collections\n (fn [db _]\n   (get-in db [:data :collections])))\n\n(rf/reg-sub\n :data/documents\n (fn [db _]\n   (get-in db [:data :documents])))\n\n(rf/reg-sub\n :data/jobs\n (fn [db _]\n   (get-in db [:data :jobs])))\n\n(rf/reg-sub\n :data/squads\n (fn [db _]\n   (get-in db [:data :squads])))\n\n(rf/reg-sub\n :data/roles\n (fn [db _]\n   (get-in db [:data :roles])))\n\n;; ====================================\n;; COMPUTED DATA SUBSCRIPTIONS\n;; ====================================\n\n;; Graph structure - pre-computed squad columns with root jobs\n(rf/reg-sub\n :data/graph-structure\n (fn [db _]\n   (get-in db [:data :graph_structure])))\n\n;; Check if data is loaded\n(rf/reg-sub\n :data/loaded?\n :<- [:data/collections]\n :<- [:data/jobs]\n (fn [[collections jobs] _]\n   (and (not-empty collections) (not-empty jobs))))\n\n;; Data statistics\n(rf/reg-sub\n :data/stats\n :<- [:data/collections]\n :<- [:data/documents] \n :<- [:data/jobs]\n (fn [[collections documents jobs] _]\n   (let [total-collections (count collections)\n         total-documents (count documents)\n         total-jobs (count jobs)\n         completed-jobs (count (filter #(:completed (second %)) jobs))\n         documents-by-status (group-by :status (vals documents))]\n     {:total-collections total-collections\n      :total-documents total-documents\n      :total-jobs total-jobs\n      :completed-jobs completed-jobs\n      :documents-done (count (get documents-by-status \"done\" []))\n      :documents-in-progress (count (get documents-by-status \"in_progress\" []))\n      :documents-ready (count (get documents-by-status \"ready\" []))\n      :documents-blocked (count (get documents-by-status \"blocked\" []))})))"]}