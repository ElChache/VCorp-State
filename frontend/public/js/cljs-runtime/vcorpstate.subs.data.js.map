{"version":3,"sources":["vcorpstate/subs/data.cljs"],"mappings":"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","names":["re_frame.core.reg_sub","db","_","cljs.core.get_in","collections","cljs.core.reduce","acc","collection","cljs.core.assoc","cljs.core/vals","p__12655","vec__12656","cljs.core.nth","collections-by-slug","documents","documents-by-collection-id","cljs.core/group-by","p__12659","vec__12660","slug","collection-docs","cljs.core.get","total-docs","cljs.core/count","ready-docs","p1__12654#","cljs.core.filter","all-ready?","cljs.core._EQ_","p__12663","vec__12664","jobs","and__5000__auto__","cljs.core/not-empty","p__12668","vec__12669","total-collections","total-documents","total-jobs","completed-jobs","p1__12667#","cljs.core/second","documents-by-status"],"sourcesContent":["(ns vcorpstate.subs.data\n  \"Data subscriptions - collections, documents, jobs, etc.\"\n  (:require [re-frame.core :as rf]))\n\n;; ====================================\n;; DATA SUBSCRIPTIONS\n;; ====================================\n\n;; Raw data subscriptions\n(rf/reg-sub\n :data/collections\n (fn [db _]\n   (get-in db [:data :collections])))\n\n(rf/reg-sub\n :data/documents\n (fn [db _]\n   (get-in db [:data :documents])))\n\n(rf/reg-sub\n :data/jobs\n (fn [db _]\n   (get-in db [:data :jobs])))\n\n(rf/reg-sub\n :data/jobs-by-slug\n (fn [db _]\n   (get-in db [:data :jobs-by-slug])))\n\n(rf/reg-sub\n :data/collections-by-slug\n :<- [:data/collections]\n (fn [collections _]\n   (reduce (fn [acc collection]\n             (assoc acc (:slug collection) collection))\n           {}\n           (vals collections))))\n\n;; Enhanced collections with document stats\n(rf/reg-sub\n :data/collections-with-stats\n :<- [:data/collections-by-slug]\n :<- [:data/documents]\n (fn [[collections-by-slug documents] _]\n   (let [;; Group documents by collection ID\n         documents-by-collection-id (group-by :document_collection_id (vals documents))]\n     (reduce (fn [acc [slug collection]]\n               (let [collection-docs (get documents-by-collection-id (:id collection) [])\n                     total-docs (count collection-docs)\n                     ready-docs (count (filter #(:ready %) collection-docs))\n                     all-ready? (and (> total-docs 0) (= ready-docs total-docs))]\n                 (assoc acc slug \n                        (assoc collection \n                               :documents collection-docs\n                               :total-documents total-docs\n                               :ready-documents ready-docs\n                               :all-documents-ready? all-ready?))))\n             {}\n             collections-by-slug))))\n\n(rf/reg-sub\n :data/squads\n (fn [db _]\n   (get-in db [:data :squads])))\n\n(rf/reg-sub\n :data/roles\n (fn [db _]\n   (get-in db [:data :roles])))\n\n;; ====================================\n;; COMPUTED DATA SUBSCRIPTIONS\n;; ====================================\n\n;; Graph structure - pre-computed squad columns with root jobs\n(rf/reg-sub\n :data/graph-structure\n (fn [db _]\n   (get-in db [:data :graph_structure])))\n\n;; Check if data is loaded\n(rf/reg-sub\n :data/loaded?\n :<- [:data/collections]\n :<- [:data/jobs]\n (fn [[collections jobs] _]\n   (and (not-empty collections) (not-empty jobs))))\n\n;; Data statistics\n(rf/reg-sub\n :data/stats\n :<- [:data/collections]\n :<- [:data/documents] \n :<- [:data/jobs]\n (fn [[collections documents jobs] _]\n   (let [total-collections (count collections)\n         total-documents (count documents)\n         total-jobs (count jobs)\n         completed-jobs (count (filter #(:completed (second %)) jobs))\n         documents-by-status (group-by :status (vals documents))]\n     {:total-collections total-collections\n      :total-documents total-documents\n      :total-jobs total-jobs\n      :completed-jobs completed-jobs\n      :documents-done (count (get documents-by-status \"done\" []))\n      :documents-in-progress (count (get documents-by-status \"in_progress\" []))\n      :documents-ready (count (get documents-by-status \"ready\" []))\n      :documents-blocked (count (get documents-by-status \"blocked\" []))})))"]}