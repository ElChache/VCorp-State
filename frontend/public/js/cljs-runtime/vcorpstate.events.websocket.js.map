{"version":3,"sources":["vcorpstate/events/websocket.cljs"],"mappings":";AAUA,yDAAA,zDAACA,qIAEA,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaK;IAAbF,aAAAJ;QAAA,AAAAK,4CAAAD,WAAA,IAAA,/DAAmBG;iBAAnB,AAAAF,4CAAAD,WAAA,IAAA,xEAAqBI;AAArB,AACE,IAAMC,gBAAc,AAACC,iDAA+BF;AAApD,AAAA,kDAAA,gDACO,sBAAA,mFAAA,gEAAA,zKAACG,mBAASL,+NAA4BG;;AAGhD,yDAAA,zDAACG,yIAEA,cAAAC,HAAKP;AAAL,AAAA,IAAAQ,aAAAD;QAAA,AAAAR,4CAAAS,WAAA,IAAA,/DAASP;SAAT,AAAAF,4CAAAS,WAAA,IAAA,hEAAWC;AAAX,mFACMT,nBACA,sBAAA,mFAAA,gEAAA,0EAAA,nPAACK,nBACD,4QAAA,mFAAA,gEAAA,/ZAACA,weAAkCI,3fACnC,+fAAA,mFAAA,gEAAA,0FAAA,5uBAACJ,1BACD,2wBAAA,mFAAA,uDAAA,0EAAA,x9BAACA;;AAGR,yDAAA,zDAACC,gJAEA,WAAKN,GAAGC;AAAR,6CACMD,nBACA,sBAAA,mFAAA,gEAAA,0EAAA,nPAACK,1BACD,oRAAA,mFAAA,uDAAA,0EAAA,jeAACA;;AAGR,yDAAA,zDAACC,iIAEA,cAAAI,HAAKV;AAAL,AAAA,IAAAW,aAAAD;QAAA,AAAAX,4CAAAY,WAAA,IAAA,/DAASV;YAAT,AAAAF,4CAAAY,WAAA,IAAA,nEAAWC;AAAX,+FACMZ,nBACA,sBAAA,mFAAA,gEAAA,0EAAA,nPAACK,nBACD,6QAAA,mFAAA,uDAAA,0EAAA,jeAACA,zDACD,iiBAAA,mFAAA,gEAAA,7qBAACQ,uwBAA2CC;;AAOnD,yDAAA,zDAACR,mJAEA,cAAAS,HAAKf;AAAL,AAAA,IAAAgB,aAAAD;QAAA,AAAAhB,4CAAAiB,WAAA,IAAA,/DAASf;YAAT,AAAAF,4CAAAiB,WAAA,IAAA,nEAAWC;AAAX,AACE,IAAMC,aAAW,AAAA,mFAAOD;AAAxB,AACE,IAAAE,iBAAMD;AAAN,AAAA,QAAAC;KAAA;AAC4B,uBAAA,mFAAA,1GAACC,8MAA4CH;;;KADzE;AAEuB,uBAAA,mFAAA,1GAACG,oMAAuCH;;;KAF/D;AAGgC,uBAAA,mFAAA,1GAACG,sNAAgDH;;;KAHjF;AAIqB,uBAAA,mFAAA,1GAACG,gMAAqCH;;;;AACzD,YAAA,ZAACI,4CAA+CH;;;;AAClD,6BAAA,mFAAA,gEAAA,zKAACb,mBAASL,+NAA4BiB","names":["re_frame.core.reg_event_fx","p__11212","p__11213","map__11214","cljs.core/--destructure-map","cljs.core.get","vec__11215","cljs.core.nth","db","_","project-id","ws-connection","vcorpstate.websocket/create-websocket-connection","cljs.core/assoc-in","re_frame.core.reg_event_db","p__11218","vec__11219","ws","p__11222","vec__11229","error","cljs.core.update_in","cljs.core/inc","p__11241","vec__11242","event","event-type","G__11248","re-frame.core/dispatch","js/console.log"],"sourcesContent":["(ns vcorpstate.events.websocket\n  \"WebSocket-related events\"\n  (:require [re-frame.core :as rf]\n            [vcorpstate.websocket :as ws]))\n\n;; ====================================\n;; WEBSOCKET CONNECTION EVENTS\n;; ====================================\n\n;; Connect to WebSocket\n(rf/reg-event-fx\n :websocket/connect\n (fn [{:keys [db]} [_ project-id]]\n   (let [ws-connection (ws/create-websocket-connection project-id)]\n     {:db (assoc-in db [:websocket :connection] ws-connection)})))\n\n;; WebSocket connected\n(rf/reg-event-db\n :websocket/connected\n (fn [db [_ ws]]\n   (-> db\n       (assoc-in [:websocket :connected?] true)\n       (assoc-in [:websocket :connection] ws)\n       (assoc-in [:websocket :reconnect-attempts] 0)\n       (assoc-in [:graph :connected?] true))))\n\n;; WebSocket disconnected\n(rf/reg-event-db\n :websocket/disconnected\n (fn [db _]\n   (-> db\n       (assoc-in [:websocket :connected?] false)\n       (assoc-in [:graph :connected?] false))))\n\n;; WebSocket error\n(rf/reg-event-db\n :websocket/error\n (fn [db [_ error]]\n   (-> db\n       (assoc-in [:websocket :connected?] false)\n       (assoc-in [:graph :connected?] false)\n       (update-in [:websocket :reconnect-attempts] inc))))\n\n;; ====================================\n;; WEBSOCKET EVENT ROUTING\n;; ====================================\n\n;; Handle WebSocket events (router)\n(rf/reg-event-db\n :websocket/event-received\n (fn [db [_ event]]\n   (let [event-type (:type event)]\n     (case event-type\n       \"document_status_changed\" (rf/dispatch [:graph/document-status-changed event])\n       \"job_status_changed\" (rf/dispatch [:graph/job-status-changed event])\n       \"collection_progress_updated\" (rf/dispatch [:graph/collection-progress-updated event])\n       \"document_created\" (rf/dispatch [:graph/document-created event])\n       (js/console.log \"Unknown WebSocket event type:\" event-type))\n     (assoc-in db [:websocket :last-event] event))))"]}