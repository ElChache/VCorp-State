{"version":3,"sources":["vcorpstate/events/dialogs.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","db","_","cljs.core/assoc-in","p__14540","vec__14541","cljs.core.nth","role-short-name","new-count","count","x__5087__auto__","y__5088__auto__","re_frame.core.reg_event_fx","p__14545","map__14546","cljs.core/--destructure-map","cljs.core.get","role-counts","cljs.core.get_in","project-id","js/parseInt","or__5002__auto__","launch-requests","p1__14544#","cljs.core.filter","cljs.core/second","and__5000__auto__","cljs.core/seq","cljs.core.mapv","p__14547","vec__14548","role","p__14551","vec__14552","vcorpstate.http/launch-agents","p__14555","vec__14556","response","new-result","cljs.core.update_in","cljs.core/conj","p__14559","vec__14560","error","p__14563","vec__14564","document-slug","js/console.log","p__14567","vec__14568","document-id","ready?","p__14571","vec__14572","vcorpstate.http/update-document-status","p__14575","vec__14576","_document-id","_ready?","_response","p__14579","vec__14580","_document-slug","_error","p__14583","vec__14584","field","value","p__14587","map__14588","form-data","cljs.core/clj->js","p__14589","p__14590","map__14591","vec__14592","vcorpstate.routes/navigate-to-route!","p__14595","vec__14596","js/console.error","p__14599","vec__14600","project-data","vcorpstate.http/create-project"],"sourcesContent":["(ns vcorpstate.events.dialogs\n  (:require [re-frame.core :as rf]\n            [vcorpstate.http :as http]\n            [vcorpstate.routes :as routes]))\n\n;; Show launch agents dialog\n(rf/reg-event-db\n :show-launch-agents-dialog\n (fn [db _]\n   (-> db\n       (assoc-in [:dialogs :launch-agents-open?] true)\n       (assoc-in [:dialogs :role-counts] {}))))\n\n;; Hide launch agents dialog\n(rf/reg-event-db\n :hide-launch-agents-dialog\n (fn [db _]\n   (-> db\n       (assoc-in [:dialogs :launch-agents-open?] false)\n       (assoc-in [:dialogs :role-counts] {}))))\n\n;; Update role count\n(rf/reg-event-db\n :update-role-count\n (fn [db [_ role-short-name new-count]]\n   (let [count (max 0 new-count)]\n     (assoc-in db [:dialogs :role-counts role-short-name] count))))\n\n;; Launch agents (triggers multiple API calls)\n(rf/reg-event-fx\n :launch-agents\n (fn [{:keys [db]} _]\n   (let [role-counts (get-in db [:dialogs :role-counts])\n         project-id (js/parseInt (or (get-in db [:route :params :id])\n                                      (get-in db [:data :selected-project-id]) \n                                      (:selected-project-id db)\n                                      \"1\"))\n         launch-requests (filter #(> (second %) 0) role-counts)]\n     (if (and project-id (seq launch-requests))\n       {:db (-> db\n                (assoc-in [:dialogs :launching-agents?] true)\n                (assoc-in [:dialogs :agent-launch-results] [])\n                (assoc-in [:dialogs :agent-launch-error] nil)\n                (assoc-in [:dialogs :launch-agents-open?] false)\n                (assoc-in [:dialogs :role-counts] {}))\n        :dispatch-n (mapv (fn [[role count]]\n                            [:http/launch-agents project-id role count])\n                          launch-requests)}\n       {:db (assoc-in db [:dialogs :agent-launch-error] \"Please select roles to launch\")}))))\n\n;; HTTP event handler for launching agents\n(rf/reg-event-fx\n :http/launch-agents\n (fn [_ [_ project-id role count]]\n   (http/launch-agents project-id role count)\n   {}))\n\n;; Handle successful agent launch\n(rf/reg-event-db\n :agents/launch-success\n (fn [db [_ role response]]\n   (let [new-result {:role role :success true :response response}]\n     (-> db\n         (update-in [:dialogs :agent-launch-results] conj new-result)\n         (assoc-in [:dialogs :launching-agents?] false)))))\n\n;; Handle agent launch failure  \n(rf/reg-event-db\n :agents/launch-error\n (fn [db [_ role error]]\n   (let [new-result {:role role :success false :error error}]\n     (-> db\n         (update-in [:dialogs :agent-launch-results] conj new-result)\n         (assoc-in [:dialogs :launching-agents?] false)\n         (assoc-in [:dialogs :agent-launch-error] (str \"Failed to launch \" role \" agents: \" (or (:message error) \"Unknown error\")))))))\n\n;; ====================================\n;; DOCUMENT DIALOG\n;; ====================================\n\n;; Show document dialog\n(rf/reg-event-db\n :show-document-dialog\n (fn [db [_ document-slug]]\n   (js/console.log \"Opening document dialog for:\" document-slug)\n   (-> db\n       (assoc-in [:dialogs :document-open?] true)\n       (assoc-in [:dialogs :selected-document] document-slug))))\n\n;; Hide document dialog\n(rf/reg-event-db\n :hide-document-dialog\n (fn [db _]\n   (-> db\n       (assoc-in [:dialogs :document-open?] false)\n       (assoc-in [:dialogs :selected-document] nil))))\n\n;; Set document status directly\n(rf/reg-event-fx\n :set-document-status\n (fn [_ [_ document-id ready?]]\n   {:dispatch [:http/update-document-status document-id ready?]}))\n\n;; HTTP event handler for updating document status\n(rf/reg-event-fx\n :http/update-document-status\n (fn [_ [_ document-id ready?]]\n   (http/update-document-status document-id ready?)\n   {}))\n\n;; Handle successful document status update\n(rf/reg-event-db\n :document/status-updated\n (fn [db [_ _document-id _ready? _response]]\n   ;; Update by finding the document in the collections with matching ID\n   ;; The real-time WebSocket updates should handle this automatically\n   db))\n\n;; Handle document status update failure\n(rf/reg-event-db\n :document/status-update-failed\n (fn [db [_ _document-slug _error]]\n   db))\n\n;; ====================================\n;; CREATE PROJECT DIALOG\n;; ====================================\n\n;; Show create project dialog\n(rf/reg-event-db\n :show-create-project-dialog\n (fn [db _]\n   (js/console.log \"Opening create project dialog\")\n   (-> db\n       (assoc-in [:dialogs :create-project-open?] true)\n       (assoc-in [:dialogs :create-project-form] {:name \"Monitors\"\n                                                  :description \"Monitoring magic\"\n                                                  :path \"/Users/davidcerezo/Projects/monitors\"\n                                                  :github_origin \"https://github.com/ElChache/monitors.git\"\n                                                  :template_id \"vcorp_standard\"})\n       (assoc-in [:dialogs :creating-project?] false)\n       (assoc-in [:dialogs :create-project-error] nil))))\n\n;; Hide create project dialog\n(rf/reg-event-db\n :hide-create-project-dialog\n (fn [db _]\n   (-> db\n       (assoc-in [:dialogs :create-project-open?] false)\n       (assoc-in [:dialogs :create-project-form] {})\n       (assoc-in [:dialogs :creating-project?] false)\n       (assoc-in [:dialogs :create-project-error] nil))))\n\n;; Update create project form field\n(rf/reg-event-db\n :update-create-project-form\n (fn [db [_ field value]]\n   (assoc-in db [:dialogs :create-project-form field] value)))\n\n;; Create project (starts the process)\n(rf/reg-event-fx\n :create-project\n (fn [{:keys [db]} _]\n   (let [form-data (get-in db [:dialogs :create-project-form])]\n     (js/console.log \"Creating project with data:\" (clj->js form-data))\n     {:db (-> db\n              (assoc-in [:dialogs :creating-project?] true)\n              (assoc-in [:dialogs :create-project-error] nil))\n      :dispatch [:http/create-project form-data]})))\n\n;; Handle successful project creation\n(rf/reg-event-fx\n :create-project-success\n (fn [{:keys [db]} [_ response]]\n   (js/console.log \"Project created successfully:\" (clj->js response))\n   (let [project-id (get-in response [:project :id])]\n     (js/console.log \"Navigating to project ID:\" project-id)\n     ;; Navigate to the newly created project\n     (routes/navigate-to-route! {:name :project :params {:id project-id}})\n     {:db (-> db\n              (assoc-in [:dialogs :creating-project?] false)\n              (assoc-in [:dialogs :create-project-open?] false)\n              (assoc-in [:dialogs :create-project-form] {}))})))\n\n;; Handle project creation failure\n(rf/reg-event-db\n :create-project-error\n (fn [db [_ error]]\n   (js/console.error \"Project creation failed:\" (clj->js error))\n   (-> db\n       (assoc-in [:dialogs :creating-project?] false)\n       (assoc-in [:dialogs :create-project-error] (or (:message error) \"Failed to create project\")))))\n\n;; HTTP event handler for creating project\n(rf/reg-event-fx\n :http/create-project\n (fn [_ [_ project-data]]\n   (http/create-project project-data)\n   {}))"]}