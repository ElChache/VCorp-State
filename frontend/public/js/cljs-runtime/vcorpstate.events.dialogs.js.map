{"version":3,"sources":["vcorpstate/events/dialogs.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","db","_","js/console.log","cljs.core/assoc-in","p__12643","vec__12644","cljs.core.nth","role-short-name","new-count","count","x__5087__auto__","y__5088__auto__","p__12647","vec__12648","field","value","re_frame.core.reg_event_fx","p__12651","map__12652","cljs.core/--destructure-map","cljs.core.get","form-data","cljs.core.get_in","cljs.core/clj->js","p__12653","p__12654","map__12655","vec__12656","response","project-id","vcorpstate.routes/navigate-to-route!","p__12659","vec__12660","error","js/console.error","or__5002__auto__","p__12663","vec__12664","project-data","vcorpstate.http/create-project"],"sourcesContent":["(ns vcorpstate.events.dialogs\n  (:require [re-frame.core :as rf]\n            [vcorpstate.http :as http]\n            [vcorpstate.routes :as routes]))\n\n;; Show launch agents dialog\n(rf/reg-event-db\n :show-launch-agents-dialog\n (fn [db _]\n   (js/console.log \"Opening launch agents dialog\")\n   (-> db\n       (assoc-in [:dialogs :launch-agents-open?] true)\n       (assoc-in [:dialogs :role-counts] {}))))\n\n;; Hide launch agents dialog\n(rf/reg-event-db\n :hide-launch-agents-dialog\n (fn [db _]\n   (-> db\n       (assoc-in [:dialogs :launch-agents-open?] false)\n       (assoc-in [:dialogs :role-counts] {}))))\n\n;; Update role count\n(rf/reg-event-db\n :update-role-count\n (fn [db [_ role-short-name new-count]]\n   (let [count (max 0 new-count)]\n     (assoc-in db [:dialogs :role-counts role-short-name] count))))\n\n;; ====================================\n;; CREATE PROJECT DIALOG\n;; ====================================\n\n;; Show create project dialog\n(rf/reg-event-db\n :show-create-project-dialog\n (fn [db _]\n   (js/console.log \"Opening create project dialog\")\n   (-> db\n       (assoc-in [:dialogs :create-project-open?] true)\n       (assoc-in [:dialogs :create-project-form] {:name \"Monitors\"\n                                                  :description \"Monitoring magic\"\n                                                  :path \"/Users/davidcerezo/Projects/monitors\"\n                                                  :github_origin \"https://github.com/ElChache/monitors.git\"\n                                                  :template_id \"vcorp_standard\"})\n       (assoc-in [:dialogs :creating-project?] false)\n       (assoc-in [:dialogs :create-project-error] nil))))\n\n;; Hide create project dialog\n(rf/reg-event-db\n :hide-create-project-dialog\n (fn [db _]\n   (-> db\n       (assoc-in [:dialogs :create-project-open?] false)\n       (assoc-in [:dialogs :create-project-form] {})\n       (assoc-in [:dialogs :creating-project?] false)\n       (assoc-in [:dialogs :create-project-error] nil))))\n\n;; Update create project form field\n(rf/reg-event-db\n :update-create-project-form\n (fn [db [_ field value]]\n   (assoc-in db [:dialogs :create-project-form field] value)))\n\n;; Create project (starts the process)\n(rf/reg-event-fx\n :create-project\n (fn [{:keys [db]} _]\n   (let [form-data (get-in db [:dialogs :create-project-form])]\n     (js/console.log \"Creating project with data:\" (clj->js form-data))\n     {:db (-> db\n              (assoc-in [:dialogs :creating-project?] true)\n              (assoc-in [:dialogs :create-project-error] nil))\n      :dispatch [:http/create-project form-data]})))\n\n;; Handle successful project creation\n(rf/reg-event-fx\n :create-project-success\n (fn [{:keys [db]} [_ response]]\n   (js/console.log \"Project created successfully:\" (clj->js response))\n   (let [project-id (get-in response [:project :id])]\n     (js/console.log \"Navigating to project ID:\" project-id)\n     ;; Navigate to the newly created project\n     (routes/navigate-to-route! {:name :project :params {:id project-id}})\n     {:db (-> db\n              (assoc-in [:dialogs :creating-project?] false)\n              (assoc-in [:dialogs :create-project-open?] false)\n              (assoc-in [:dialogs :create-project-form] {}))})))\n\n;; Handle project creation failure\n(rf/reg-event-db\n :create-project-error\n (fn [db [_ error]]\n   (js/console.error \"Project creation failed:\" (clj->js error))\n   (-> db\n       (assoc-in [:dialogs :creating-project?] false)\n       (assoc-in [:dialogs :create-project-error] (or (:message error) \"Failed to create project\")))))\n\n;; HTTP event handler for creating project\n(rf/reg-event-fx\n :http/create-project\n (fn [_ [_ project-data]]\n   (http/create-project project-data)\n   {}))"]}