{"version":3,"sources":["vcorpstate/events/dialogs.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","db","_","js/console.log","cljs.core/assoc-in","p__12473","vec__12474","cljs.core.nth","role-short-name","new-count","count","x__5087__auto__","y__5088__auto__","re_frame.core.reg_event_fx","p__12483","map__12484","cljs.core/--destructure-map","cljs.core.get","role-counts","cljs.core.get_in","project-id","launch-requests","p1__12481#","cljs.core.filter","cljs.core/second","cljs.core/clj->js","and__5000__auto__","cljs.core/seq","cljs.core.mapv","p__12485","vec__12487","role","p__12490","vec__12491","vcorpstate.http/launch-agents","p__12494","vec__12495","response","current-results","new-result","cljs.core.update_in","cljs.core/conj","p__12506","vec__12507","error","js/console.error","or__5002__auto__","p__12514","vec__12515","document-slug","p__12522","p__12523","map__12524","vec__12525","current-status","new-status","cljs.core._EQ_","p__12538","vec__12539","status","vcorpstate.http/update-document-status","p__12543","vec__12547","p__12551","vec__12552","p__12556","vec__12560","field","value","p__12564","map__12565","form-data","p__12566","p__12567","map__12568","vec__12569","vcorpstate.routes/navigate-to-route!","p__12577","vec__12578","p__12581","vec__12582","project-data","vcorpstate.http/create-project"],"sourcesContent":["(ns vcorpstate.events.dialogs\n  (:require [re-frame.core :as rf]\n            [vcorpstate.http :as http]\n            [vcorpstate.routes :as routes]))\n\n;; Show launch agents dialog\n(rf/reg-event-db\n :show-launch-agents-dialog\n (fn [db _]\n   (js/console.log \"Opening launch agents dialog\")\n   (-> db\n       (assoc-in [:dialogs :launch-agents-open?] true)\n       (assoc-in [:dialogs :role-counts] {}))))\n\n;; Hide launch agents dialog\n(rf/reg-event-db\n :hide-launch-agents-dialog\n (fn [db _]\n   (-> db\n       (assoc-in [:dialogs :launch-agents-open?] false)\n       (assoc-in [:dialogs :role-counts] {}))))\n\n;; Update role count\n(rf/reg-event-db\n :update-role-count\n (fn [db [_ role-short-name new-count]]\n   (let [count (max 0 new-count)]\n     (assoc-in db [:dialogs :role-counts role-short-name] count))))\n\n;; Launch agents (triggers multiple API calls)\n(rf/reg-event-fx\n :launch-agents\n (fn [{:keys [db]} _]\n   (let [role-counts (get-in db [:dialogs :role-counts])\n         project-id (get-in db [:data :selected-project-id])\n         launch-requests (filter #(> (second %) 0) role-counts)]\n     (js/console.log \"Launching agents:\" (clj->js launch-requests) \"for project:\" project-id)\n     (if (and project-id (seq launch-requests))\n       {:db (-> db\n                (assoc-in [:dialogs :launching-agents?] true)\n                (assoc-in [:dialogs :agent-launch-results] [])\n                (assoc-in [:dialogs :agent-launch-error] nil))\n        :dispatch-n (mapv (fn [[role count]]\n                            [:http/launch-agents project-id role count])\n                          launch-requests)}\n       {:db (assoc-in db [:dialogs :agent-launch-error] \"Please select roles to launch\")}))))\n\n;; HTTP event handler for launching agents\n(rf/reg-event-fx\n :http/launch-agents\n (fn [_ [_ project-id role count]]\n   (http/launch-agents project-id role count)\n   {}))\n\n;; Handle successful agent launch\n(rf/reg-event-db\n :agents/launch-success\n (fn [db [_ role response]]\n   (js/console.log \"Agents launched successfully for role\" role \":\" (clj->js response))\n   (let [current-results (get-in db [:dialogs :agent-launch-results] [])\n         new-result {:role role :success true :response response}]\n     (-> db\n         (update-in [:dialogs :agent-launch-results] conj new-result)\n         (assoc-in [:dialogs :launching-agents?] false)))))\n\n;; Handle agent launch failure  \n(rf/reg-event-db\n :agents/launch-error\n (fn [db [_ role error]]\n   (js/console.error \"Agent launch failed for role\" role \":\" (clj->js error))\n   (let [current-results (get-in db [:dialogs :agent-launch-results] [])\n         new-result {:role role :success false :error error}]\n     (-> db\n         (update-in [:dialogs :agent-launch-results] conj new-result)\n         (assoc-in [:dialogs :launching-agents?] false)\n         (assoc-in [:dialogs :agent-launch-error] (str \"Failed to launch \" role \" agents: \" (or (:message error) \"Unknown error\")))))))\n\n;; ====================================\n;; DOCUMENT DIALOG\n;; ====================================\n\n;; Show document dialog\n(rf/reg-event-db\n :show-document-dialog\n (fn [db [_ document-slug]]\n   (js/console.log \"Opening document dialog for:\" document-slug)\n   (-> db\n       (assoc-in [:dialogs :document-open?] true)\n       (assoc-in [:dialogs :selected-document] document-slug))))\n\n;; Hide document dialog\n(rf/reg-event-db\n :hide-document-dialog\n (fn [db _]\n   (-> db\n       (assoc-in [:dialogs :document-open?] false)\n       (assoc-in [:dialogs :selected-document] nil))))\n\n;; Toggle document status\n(rf/reg-event-fx\n :toggle-document-status\n (fn [{:keys [db]} [_ document-slug]]\n   (let [current-status (get-in db [:data :documents-by-slug document-slug :status] \"not ready\")\n         new-status (if (= current-status \"ready\") \"not ready\" \"ready\")]\n     (js/console.log \"Toggling document status for\" document-slug \"from\" current-status \"to\" new-status)\n     {:dispatch [:http/update-document-status document-slug new-status]})))\n\n;; HTTP event handler for updating document status\n(rf/reg-event-fx\n :http/update-document-status\n (fn [_ [_ document-slug status]]\n   (http/update-document-status document-slug status)\n   {}))\n\n;; Handle successful document status update\n(rf/reg-event-db\n :document/status-updated\n (fn [db [_ document-slug status response]]\n   (js/console.log \"Document status updated successfully:\" document-slug \"to\" status)\n   (assoc-in db [:data :documents-by-slug document-slug :status] status)))\n\n;; Handle document status update failure\n(rf/reg-event-db\n :document/status-update-failed\n (fn [db [_ document-slug error]]\n   (js/console.error \"Failed to update document status:\" document-slug error)\n   db))\n\n;; ====================================\n;; CREATE PROJECT DIALOG\n;; ====================================\n\n;; Show create project dialog\n(rf/reg-event-db\n :show-create-project-dialog\n (fn [db _]\n   (js/console.log \"Opening create project dialog\")\n   (-> db\n       (assoc-in [:dialogs :create-project-open?] true)\n       (assoc-in [:dialogs :create-project-form] {:name \"Monitors\"\n                                                  :description \"Monitoring magic\"\n                                                  :path \"/Users/davidcerezo/Projects/monitors\"\n                                                  :github_origin \"https://github.com/ElChache/monitors.git\"\n                                                  :template_id \"vcorp_standard\"})\n       (assoc-in [:dialogs :creating-project?] false)\n       (assoc-in [:dialogs :create-project-error] nil))))\n\n;; Hide create project dialog\n(rf/reg-event-db\n :hide-create-project-dialog\n (fn [db _]\n   (-> db\n       (assoc-in [:dialogs :create-project-open?] false)\n       (assoc-in [:dialogs :create-project-form] {})\n       (assoc-in [:dialogs :creating-project?] false)\n       (assoc-in [:dialogs :create-project-error] nil))))\n\n;; Update create project form field\n(rf/reg-event-db\n :update-create-project-form\n (fn [db [_ field value]]\n   (assoc-in db [:dialogs :create-project-form field] value)))\n\n;; Create project (starts the process)\n(rf/reg-event-fx\n :create-project\n (fn [{:keys [db]} _]\n   (let [form-data (get-in db [:dialogs :create-project-form])]\n     (js/console.log \"Creating project with data:\" (clj->js form-data))\n     {:db (-> db\n              (assoc-in [:dialogs :creating-project?] true)\n              (assoc-in [:dialogs :create-project-error] nil))\n      :dispatch [:http/create-project form-data]})))\n\n;; Handle successful project creation\n(rf/reg-event-fx\n :create-project-success\n (fn [{:keys [db]} [_ response]]\n   (js/console.log \"Project created successfully:\" (clj->js response))\n   (let [project-id (get-in response [:project :id])]\n     (js/console.log \"Navigating to project ID:\" project-id)\n     ;; Navigate to the newly created project\n     (routes/navigate-to-route! {:name :project :params {:id project-id}})\n     {:db (-> db\n              (assoc-in [:dialogs :creating-project?] false)\n              (assoc-in [:dialogs :create-project-open?] false)\n              (assoc-in [:dialogs :create-project-form] {}))})))\n\n;; Handle project creation failure\n(rf/reg-event-db\n :create-project-error\n (fn [db [_ error]]\n   (js/console.error \"Project creation failed:\" (clj->js error))\n   (-> db\n       (assoc-in [:dialogs :creating-project?] false)\n       (assoc-in [:dialogs :create-project-error] (or (:message error) \"Failed to create project\")))))\n\n;; HTTP event handler for creating project\n(rf/reg-event-fx\n :http/create-project\n (fn [_ [_ project-data]]\n   (http/create-project project-data)\n   {}))"]}