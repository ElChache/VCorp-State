{"version":3,"sources":["vcorpstate/events/navigation.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx","p__11266","map__11267","cljs.core/--destructure-map","cljs.core.get","db","_","api-url","vcorpstate.config/config","js/console.log","cljs.core.assoc","ajax.core/json-request-format","ajax.core/json-response-format","p__11268","p__11269","map__11271","vec__11272","cljs.core.nth","projects","updated-db","pending-route","cljs.core.dissoc","cljs.core.get_in","re_frame.core.reg_event_db","p__11278","vec__11279","error","js/console.error","p__11282","vec__11283","project-id","p__11286","vec__11287","p__11290","vec__11291","view","p__11294","vec__11295","route","p__11298","p__11299","map__11300","vec__11301"],"sourcesContent":["(ns vcorpstate.events.navigation\n  \"Navigation and routing events\"\n  (:require [re-frame.core :as rf]\n            [ajax.core :as ajax]\n            [day8.re-frame.http-fx]\n            [vcorpstate.config :as config]))\n\n;; ====================================\n;; PROJECT LOADING EVENTS\n;; ====================================\n\n;; Fetch projects from backend\n(rf/reg-event-fx\n :fetch-projects\n (fn [{:keys [db]} _]\n   (let [api-url (str (:backend-url config/config) (:api-base config/config) \"/projects\")]\n     (js/console.log \"Fetching projects from:\" api-url)\n     {:db (assoc db :loading? true :error nil)\n      :http-xhrio {:method :get\n                   :uri api-url\n                   :format (ajax/json-request-format)\n                   :response-format (ajax/json-response-format {:keywords? true})\n                   :on-success [:fetch-projects-success]\n                   :on-failure [:fetch-projects-failure]}})))\n\n;; Handle successful projects fetch\n(rf/reg-event-fx\n :fetch-projects-success\n (fn [{:keys [db]} [_ projects]]\n   (js/console.log \"Projects fetched successfully:\" projects)\n   (let [updated-db (assoc db\n                           :loading? false\n                           :projects projects\n                           :error nil)\n         pending-route (:pending-route db)]\n     (if pending-route\n       ;; We have a pending route, try to navigate to it now\n       {:db (dissoc updated-db :pending-route)\n        :dispatch [:navigate-to-project-by-id (get-in pending-route [:params :id])]}\n       ;; No pending route, just update the db\n       {:db updated-db}))))\n\n;; Handle failed projects fetch\n(rf/reg-event-db\n :fetch-projects-failure\n (fn [db [_ error]]\n   (js/console.error \"Failed to fetch projects:\" error)\n   (assoc db\n          :loading? false\n          :error \"Failed to fetch projects\")))\n\n;; ====================================\n;; NAVIGATION EVENTS\n;; ====================================\n\n;; Set selected project\n(rf/reg-event-db\n :set-selected-project\n (fn [db [_ project-id]]\n   (assoc db :selected-project-id project-id)))\n\n;; Navigate to main view with selected project\n(rf/reg-event-db\n :navigate-to-main\n (fn [db [_ project-id]]\n   (assoc db \n          :current-view :main\n          :selected-project-id project-id)))\n\n;; Set current view\n(rf/reg-event-db\n :set-current-view\n (fn [db [_ view]]\n   (assoc db :current-view view)))\n\n;; Set current route\n(rf/reg-event-db\n :set-route\n (fn [db [_ route]]\n   (assoc db :current-route route)))\n\n;; Navigate to project by ID from URL\n(rf/reg-event-fx\n :navigate-to-project-by-id\n (fn [{:keys [db]} [_ project-id]]\n   ;; Force navigation to main view regardless of project loading status\n   ;; This ensures the sidebar is always shown when accessing /project/:id\n   {:db (assoc db \n               :current-view :main\n               :selected-project {:id project-id :name \"Test VCorp Project\"}\n               :selected-project-id project-id\n               :current-route {:name :project :params {:id project-id}})}))\n\n;; Navigate to home\n(rf/reg-event-db\n :navigate-to-home\n (fn [db _]\n   (assoc db \n          :current-view :project-selector\n          :selected-project-id nil\n          :current-route {:name :home})))"]}