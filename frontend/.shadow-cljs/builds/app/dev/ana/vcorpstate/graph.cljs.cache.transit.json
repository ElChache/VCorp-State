["^ ","~:output",["^ ","~:js","goog.provide('vcorpstate.graph');\n/**\n * Squad column layout - 7 independent vertical columns\n */\nvcorpstate.graph.squad_columns = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),\"human\",new cljs.core.Keyword(null,\"name\",\"name\",1843675177),\"Human Director\",new cljs.core.Keyword(null,\"x\",\"x\",2099068185),(100)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),\"pd\",new cljs.core.Keyword(null,\"name\",\"name\",1843675177),\"Product Designer\",new cljs.core.Keyword(null,\"x\",\"x\",2099068185),(250)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),\"arch\",new cljs.core.Keyword(null,\"name\",\"name\",1843675177),\"Architect\",new cljs.core.Keyword(null,\"x\",\"x\",2099068185),(400)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),\"fe\",new cljs.core.Keyword(null,\"name\",\"name\",1843675177),\"FE Squad\",new cljs.core.Keyword(null,\"x\",\"x\",2099068185),(550)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),\"be\",new cljs.core.Keyword(null,\"name\",\"name\",1843675177),\"BE Squad\",new cljs.core.Keyword(null,\"x\",\"x\",2099068185),(700)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),\"ai\",new cljs.core.Keyword(null,\"name\",\"name\",1843675177),\"AI Squad\",new cljs.core.Keyword(null,\"x\",\"x\",2099068185),(850)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),\"qa\",new cljs.core.Keyword(null,\"name\",\"name\",1843675177),\"QA Squad\",new cljs.core.Keyword(null,\"x\",\"x\",2099068185),(1000)], null)], null);\nvcorpstate.graph.node_colors = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"collection-input\",\"collection-input\",-1610840657),\"#3B82F6\",new cljs.core.Keyword(null,\"collection-output\",\"collection-output\",1229344754),\"#10B981\",new cljs.core.Keyword(null,\"job\",\"job\",850873087),\"#F59E0B\",new cljs.core.Keyword(null,\"job-completed\",\"job-completed\",629265890),\"#059669\",new cljs.core.Keyword(null,\"job-paused\",\"job-paused\",71056393),\"#6B7280\"], null);\n/**\n * Create maps for easy navigation: collection → producer job, collection → consumer jobs\n */\nvcorpstate.graph.create_collection_lookup_maps = (function vcorpstate$graph$create_collection_lookup_maps(squad_jobs){\nvar collection_to_producer = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__5480__auto__ = (function vcorpstate$graph$create_collection_lookup_maps_$_iter__14913(s__14914){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__14914__$1 = s__14914;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__14914__$1);\nif(temp__5804__auto__){\nvar xs__6360__auto__ = temp__5804__auto__;\nvar job = cljs.core.first(xs__6360__auto__);\nvar iterys__5476__auto__ = ((function (s__14914__$1,job,xs__6360__auto__,temp__5804__auto__){\nreturn (function vcorpstate$graph$create_collection_lookup_maps_$_iter__14913_$_iter__14915(s__14916){\nreturn (new cljs.core.LazySeq(null,((function (s__14914__$1,job,xs__6360__auto__,temp__5804__auto__){\nreturn (function (){\nvar s__14916__$1 = s__14916;\nwhile(true){\nvar temp__5804__auto____$1 = cljs.core.seq(s__14916__$1);\nif(temp__5804__auto____$1){\nvar s__14916__$2 = temp__5804__auto____$1;\nif(cljs.core.chunked_seq_QMARK_(s__14916__$2)){\nvar c__5478__auto__ = cljs.core.chunk_first(s__14916__$2);\nvar size__5479__auto__ = cljs.core.count(c__5478__auto__);\nvar b__14918 = cljs.core.chunk_buffer(size__5479__auto__);\nif((function (){var i__14917 = (0);\nwhile(true){\nif((i__14917 < size__5479__auto__)){\nvar output_slug = cljs.core._nth(c__5478__auto__,i__14917);\ncljs.core.chunk_append(b__14918,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [output_slug,job], null));\n\nvar G__14936 = (i__14917 + (1));\ni__14917 = G__14936;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__14918),vcorpstate$graph$create_collection_lookup_maps_$_iter__14913_$_iter__14915(cljs.core.chunk_rest(s__14916__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__14918),null);\n}\n} else {\nvar output_slug = cljs.core.first(s__14916__$2);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [output_slug,job], null),vcorpstate$graph$create_collection_lookup_maps_$_iter__14913_$_iter__14915(cljs.core.rest(s__14916__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(s__14914__$1,job,xs__6360__auto__,temp__5804__auto__))\n,null,null));\n});})(s__14914__$1,job,xs__6360__auto__,temp__5804__auto__))\n;\nvar fs__5477__auto__ = cljs.core.seq(iterys__5476__auto__(cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),new cljs.core.Keyword(null,\"outputs\",\"outputs\",-1896513034).cljs$core$IFn$_invoke$arity$1(job))));\nif(fs__5477__auto__){\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(fs__5477__auto__,vcorpstate$graph$create_collection_lookup_maps_$_iter__14913(cljs.core.rest(s__14914__$1)));\n} else {\nvar G__14937 = cljs.core.rest(s__14914__$1);\ns__14914__$1 = G__14937;\ncontinue;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5480__auto__(squad_jobs);\n})());\nvar collection_to_consumers = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,job){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc2,input_slug){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(acc2,input_slug,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),job);\n}),acc,cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),new cljs.core.Keyword(null,\"inputs\",\"inputs\",865803858).cljs$core$IFn$_invoke$arity$1(job)));\n}),cljs.core.PersistentArrayMap.EMPTY,squad_jobs);\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"collection-to-producer\",\"collection-to-producer\",-1242196071),collection_to_producer,new cljs.core.Keyword(null,\"collection-to-consumers\",\"collection-to-consumers\",-816001294),collection_to_consumers], null);\n});\n/**\n * Find the beginning jobs using the simple rule\n */\nvcorpstate.graph.find_first_jobs_in_column = (function vcorpstate$graph$find_first_jobs_in_column(squad_jobs,all_jobs_by_squad,is_first_column_QMARK_){\nvar all_outputs_by_any_job = cljs.core.set(cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (jobs){\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p1__14919_SHARP_){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),new cljs.core.Keyword(null,\"outputs\",\"outputs\",-1896513034).cljs$core$IFn$_invoke$arity$1(p1__14919_SHARP_));\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([jobs], 0));\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.vals(all_jobs_by_squad)], 0)));\nif(cljs.core.truth_(is_first_column_QMARK_)){\nreturn cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (job){\nvar input_slugs = cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),new cljs.core.Keyword(null,\"inputs\",\"inputs\",865803858).cljs$core$IFn$_invoke$arity$1(job));\nreturn cljs.core.not_any_QMARK_(all_outputs_by_any_job,input_slugs);\n}),squad_jobs);\n} else {\nreturn cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (job){\nvar input_slugs = cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),new cljs.core.Keyword(null,\"inputs\",\"inputs\",865803858).cljs$core$IFn$_invoke$arity$1(job)));\nreturn cljs.core.some(all_outputs_by_any_job,input_slugs);\n}),squad_jobs);\n}\n});\n/**\n * Build tree by following job → outputs → consuming jobs chain\n */\nvcorpstate.graph.build_simple_tree_chain = (function vcorpstate$graph$build_simple_tree_chain(first_jobs,lookup_maps){\nvar map__14923 = lookup_maps;\nvar map__14923__$1 = cljs.core.__destructure_map(map__14923);\nvar collection_to_consumers = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14923__$1,new cljs.core.Keyword(null,\"collection-to-consumers\",\"collection-to-consumers\",-816001294));\nvar build_chain = (function vcorpstate$graph$build_simple_tree_chain_$_build_chain_fn(job,visited){\nif(cljs.core.contains_QMARK_(visited,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(job))){\nreturn cljs.core.PersistentVector.EMPTY;\n} else {\nvar visited_SINGLEQUOTE_ = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(visited,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(job));\nvar outputs = cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),new cljs.core.Keyword(null,\"outputs\",\"outputs\",-1896513034).cljs$core$IFn$_invoke$arity$1(job));\nvar next_jobs = cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p1__14920_SHARP_){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(collection_to_consumers,p1__14920_SHARP_,cljs.core.PersistentVector.EMPTY);\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([outputs], 0));\nreturn cljs.core.cons(job,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p1__14921_SHARP_){\nreturn vcorpstate$graph$build_simple_tree_chain_$_build_chain_fn(p1__14921_SHARP_,visited_SINGLEQUOTE_);\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([next_jobs], 0)));\n}\n});\nreturn cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p1__14922_SHARP_){\nreturn build_chain(p1__14922_SHARP_,cljs.core.PersistentHashSet.EMPTY);\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([first_jobs], 0)));\n});\n/**\n * Position jobs and collections in proper workflow order: input → job → output\n */\nvcorpstate.graph.position_workflow_chain = (function vcorpstate$graph$position_workflow_chain(job_chain,column_x){\nvar y_start = (50);\nvar y_step = (80);\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (idx,job){\nvar base_y = (y_start + ((idx * y_step) * (3)));\nvar input_collections = cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),new cljs.core.Keyword(null,\"inputs\",\"inputs\",865803858).cljs$core$IFn$_invoke$arity$1(job));\nvar output_collections = cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),new cljs.core.Keyword(null,\"outputs\",\"outputs\",-1896513034).cljs$core$IFn$_invoke$arity$1(job));\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2((function (i_idx,input_slug){\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"collection\",\"collection\",-683361892),new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),[\"collection-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(input_slug)].join(''),new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"x\",\"x\",2099068185),column_x,new cljs.core.Keyword(null,\"y\",\"y\",-1757859776),(base_y + (i_idx * (25)))], null),new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),input_slug], null);\n}),input_collections),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"job\",\"job\",850873087),new cljs.core.Keyword(null,\"job\",\"job\",850873087),job,new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"x\",\"x\",2099068185),column_x,new cljs.core.Keyword(null,\"y\",\"y\",-1757859776),(base_y + y_step)], null)], null)], null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2((function (o_idx,output_slug){\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"collection\",\"collection\",-683361892),new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),[\"collection-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(output_slug)].join(''),new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"x\",\"x\",2099068185),column_x,new cljs.core.Keyword(null,\"y\",\"y\",-1757859776),((base_y + ((2) * y_step)) + (o_idx * (25)))], null),new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),output_slug], null);\n}),output_collections)], 0));\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.range.cljs$core$IFn$_invoke$arity$1(cljs.core.count(job_chain)),job_chain], 0));\n});\n/**\n * Get X position for a squad column\n */\nvcorpstate.graph.get_squad_x_position = (function vcorpstate$graph$get_squad_x_position(squad_slug){\nvar or__5002__auto__ = new cljs.core.Keyword(null,\"x\",\"x\",2099068185).cljs$core$IFn$_invoke$arity$1(cljs.core.first(cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__14924_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850).cljs$core$IFn$_invoke$arity$1(p1__14924_SHARP_),squad_slug);\n}),vcorpstate.graph.squad_columns)));\nif(cljs.core.truth_(or__5002__auto__)){\nreturn or__5002__auto__;\n} else {\nreturn (600);\n}\n});\n/**\n * Calculate collection status based on documents\n */\nvcorpstate.graph.collection_status = (function vcorpstate$graph$collection_status(collection,documents){\nvar collection_docs = cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__14925_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"document_collection_id\",\"document_collection_id\",-1215530967).cljs$core$IFn$_invoke$arity$1(p1__14925_SHARP_),new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(collection));\n}),cljs.core.vals(documents));\nvar total = cljs.core.count(collection_docs);\nvar completed = cljs.core.count(cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__14926_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"status\",\"status\",-1997798413).cljs$core$IFn$_invoke$arity$1(p1__14926_SHARP_),\"done\");\n}),collection_docs));\nif((total === (0))){\nreturn new cljs.core.Keyword(null,\"empty\",\"empty\",767870958);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(completed,total)){\nreturn new cljs.core.Keyword(null,\"completed\",\"completed\",-486056503);\n} else {\nreturn new cljs.core.Keyword(null,\"in-progress\",\"in-progress\",2126442630);\n}\n}\n});\n/**\n * Get visual status for job (affects color)\n */\nvcorpstate.graph.job_visual_status = (function vcorpstate$graph$job_visual_status(job){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"completed\",\"completed\",-486056503).cljs$core$IFn$_invoke$arity$1(job))){\nreturn new cljs.core.Keyword(null,\"completed\",\"completed\",-486056503);\n} else {\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"paused\",\"paused\",-1710376127).cljs$core$IFn$_invoke$arity$1(job))){\nreturn new cljs.core.Keyword(null,\"paused\",\"paused\",-1710376127);\n} else {\nreturn new cljs.core.Keyword(null,\"running\",\"running\",1554969103);\n\n}\n}\n});\n/**\n * Create a React Flow node for a document collection\n */\nvcorpstate.graph.build_collection_node = (function vcorpstate$graph$build_collection_node(collection,documents,squads,y_offset){\nvar status = vcorpstate.graph.collection_status(collection,documents);\nvar color = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(status,new cljs.core.Keyword(null,\"completed\",\"completed\",-486056503)))?new cljs.core.Keyword(null,\"collection-output\",\"collection-output\",1229344754).cljs$core$IFn$_invoke$arity$1(vcorpstate.graph.node_colors):new cljs.core.Keyword(null,\"collection-input\",\"collection-input\",-1610840657).cljs$core$IFn$_invoke$arity$1(vcorpstate.graph.node_colors));\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),[\"collection-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(collection))].join(''),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"default\",new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"x\",\"x\",2099068185),(50),new cljs.core.Keyword(null,\"y\",\"y\",-1757859776),y_offset], null),new cljs.core.Keyword(null,\"data\",\"data\",-232669377),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"label\",\"label\",1718410804),new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(collection),new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),new cljs.core.Keyword(null,\"description\",\"description\",-1428560544).cljs$core$IFn$_invoke$arity$1(collection),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"collection\",\"collection\",-683361892),new cljs.core.Keyword(null,\"collection-id\",\"collection-id\",963323110),new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(collection),new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850).cljs$core$IFn$_invoke$arity$1(collection),new cljs.core.Keyword(null,\"status\",\"status\",-1997798413),status], null),new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"backgroundColor\",\"backgroundColor\",1738438491),color,new cljs.core.Keyword(null,\"color\",\"color\",1011675173),\"white\",new cljs.core.Keyword(null,\"border\",\"border\",1444987323),\"none\",new cljs.core.Keyword(null,\"borderRadius\",\"borderRadius\",-1505621083),\"6px\",new cljs.core.Keyword(null,\"padding\",\"padding\",1660304693),\"8px 12px\",new cljs.core.Keyword(null,\"fontSize\",\"fontSize\",919623033),\"12px\",new cljs.core.Keyword(null,\"fontWeight\",\"fontWeight\",166450581),\"500\"], null)], null);\n});\n/**\n * Create a React Flow node for a job - new simplified version\n */\nvcorpstate.graph.build_job_node = (function vcorpstate$graph$build_job_node(job,roles,squads,position){\nvar role = cljs.core.get.cljs$core$IFn$_invoke$arity$2(roles,new cljs.core.Keyword(null,\"role\",\"role\",-736691072).cljs$core$IFn$_invoke$arity$1(job));\nvar squad_slug = (function (){var or__5002__auto__ = new cljs.core.Keyword(null,\"squad_slug\",\"squad_slug\",259729812).cljs$core$IFn$_invoke$arity$1(role);\nif(cljs.core.truth_(or__5002__auto__)){\nreturn or__5002__auto__;\n} else {\nreturn \"arch\";\n}\n})();\nvar visual_status = vcorpstate.graph.job_visual_status(job);\nvar color = cljs.core.get.cljs$core$IFn$_invoke$arity$3(vcorpstate.graph.node_colors,cljs.core.keyword.cljs$core$IFn$_invoke$arity$1([\"job-\",cljs.core.name(visual_status)].join('')),new cljs.core.Keyword(null,\"job\",\"job\",850873087).cljs$core$IFn$_invoke$arity$1(vcorpstate.graph.node_colors));\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),[\"job-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(job))].join(''),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"default\",new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),position,new cljs.core.Keyword(null,\"data\",\"data\",-232669377),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"label\",\"label\",1718410804),new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(job),new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),new cljs.core.Keyword(null,\"description\",\"description\",-1428560544).cljs$core$IFn$_invoke$arity$1(job),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"job\",\"job\",850873087),new cljs.core.Keyword(null,\"job-id\",\"job-id\",651349542),new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(job),new cljs.core.Keyword(null,\"role\",\"role\",-736691072),new cljs.core.Keyword(null,\"role\",\"role\",-736691072).cljs$core$IFn$_invoke$arity$1(job),new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850).cljs$core$IFn$_invoke$arity$1(job),new cljs.core.Keyword(null,\"squad\",\"squad\",1623679812),squad_slug,new cljs.core.Keyword(null,\"status\",\"status\",-1997798413),visual_status], null),new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"backgroundColor\",\"backgroundColor\",1738438491),color,new cljs.core.Keyword(null,\"color\",\"color\",1011675173),\"white\",new cljs.core.Keyword(null,\"border\",\"border\",1444987323),\"none\",new cljs.core.Keyword(null,\"borderRadius\",\"borderRadius\",-1505621083),\"6px\",new cljs.core.Keyword(null,\"padding\",\"padding\",1660304693),\"8px 12px\",new cljs.core.Keyword(null,\"fontSize\",\"fontSize\",919623033),\"12px\",new cljs.core.Keyword(null,\"fontWeight\",\"fontWeight\",166450581),\"500\"], null)], null);\n});\n/**\n * Build column using the simple chain algorithm\n */\nvcorpstate.graph.build_simple_column = (function vcorpstate$graph$build_simple_column(squad_slug,squad_jobs,all_jobs_by_squad,column_x,is_first_column_QMARK_){\nif(cljs.core.truth_(cljs.core.not_empty(squad_jobs))){\nvar first_jobs = vcorpstate.graph.find_first_jobs_in_column(squad_jobs,all_jobs_by_squad,is_first_column_QMARK_);\nvar lookup_maps = vcorpstate.graph.create_collection_lookup_maps(squad_jobs);\nvar job_chain = vcorpstate.graph.build_simple_tree_chain(first_jobs,lookup_maps);\nvar workflow_nodes = vcorpstate.graph.position_workflow_chain(job_chain,column_x);\nvar job_nodes = cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__14927_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__14927_SHARP_),new cljs.core.Keyword(null,\"job\",\"job\",850873087));\n}),workflow_nodes);\nvar collection_nodes = cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__14928_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__14928_SHARP_),new cljs.core.Keyword(null,\"collection\",\"collection\",-683361892));\n}),workflow_nodes);\nvar result = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"job-nodes\",\"job-nodes\",1228181907),job_nodes,new cljs.core.Keyword(null,\"collection-nodes\",\"collection-nodes\",-1502348632),collection_nodes,new cljs.core.Keyword(null,\"job-chain\",\"job-chain\",-1983558396),job_chain,new cljs.core.Keyword(null,\"output-slugs\",\"output-slugs\",873584600),cljs.core.set(cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p1__14929_SHARP_){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850),new cljs.core.Keyword(null,\"outputs\",\"outputs\",-1896513034).cljs$core$IFn$_invoke$arity$1(p1__14929_SHARP_));\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([job_chain], 0)))], null);\nreturn result;\n} else {\nreturn null;\n}\n});\n/**\n * Build React Flow graph using simple column algorithm\n */\nvcorpstate.graph.build_graph_data = (function vcorpstate$graph$build_graph_data(collections,documents,jobs,squads,roles){\nif(cljs.core.truth_((function (){var and__5000__auto__ = collections;\nif(cljs.core.truth_(and__5000__auto__)){\nreturn jobs;\n} else {\nreturn and__5000__auto__;\n}\n})())){\nconsole.log(\"=== BUILD GRAPH DEBUG ===\");\n\nconsole.log(\"Total jobs:\",cljs.core.count(cljs.core.vals(jobs)));\n\nconsole.log(\"Total collections:\",cljs.core.count(cljs.core.vals(collections)));\n\nvar jobs_by_squad = cljs.core.group_by((function (job){\nvar role_key = new cljs.core.Keyword(null,\"role\",\"role\",-736691072).cljs$core$IFn$_invoke$arity$1(job);\nvar role = cljs.core.get.cljs$core$IFn$_invoke$arity$2(roles,role_key);\nvar or__5002__auto__ = new cljs.core.Keyword(null,\"squad_slug\",\"squad_slug\",259729812).cljs$core$IFn$_invoke$arity$1(role);\nif(cljs.core.truth_(or__5002__auto__)){\nreturn or__5002__auto__;\n} else {\nreturn \"unknown\";\n}\n}),cljs.core.vals(jobs));\nvar _ = console.log(\"Jobs grouped by squad:\",cljs.core.clj__GT_js(jobs_by_squad));\nvar column_results = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__14930){\nvar map__14931 = p__14930;\nvar map__14931__$1 = cljs.core.__destructure_map(map__14931);\nvar slug = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14931__$1,new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850));\nvar x = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14931__$1,new cljs.core.Keyword(null,\"x\",\"x\",2099068185));\nvar is_first_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(slug,\"human\");\nvar squad_jobs = cljs.core.get.cljs$core$IFn$_invoke$arity$3(jobs_by_squad,slug,cljs.core.PersistentVector.EMPTY);\nconsole.log(\"Building column\",slug,\"with\",cljs.core.count(squad_jobs),\"jobs at x=\",x);\n\nreturn vcorpstate.graph.build_simple_column(slug,squad_jobs,jobs_by_squad,x,is_first_QMARK_);\n}),vcorpstate.graph.squad_columns);\nvar ___$1 = console.log(\"Column results:\",cljs.core.clj__GT_js(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,column_results)));\nvar all_job_nodes = cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"job-nodes\",\"job-nodes\",1228181907),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,column_results)], 0));\nvar all_collection_nodes = cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"collection-nodes\",\"collection-nodes\",-1502348632),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,column_results)], 0));\nvar react_flow_jobs = cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2((function (idx,p__14932){\nvar map__14933 = p__14932;\nvar map__14933__$1 = cljs.core.__destructure_map(map__14933);\nvar job = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14933__$1,new cljs.core.Keyword(null,\"job\",\"job\",850873087));\nvar position = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14933__$1,new cljs.core.Keyword(null,\"position\",\"position\",-2011731912));\nconsole.log(\"Job\",new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850).cljs$core$IFn$_invoke$arity$1(job),\"at position\",position);\n\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),[\"job-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(job))].join(''),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"default\",new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),cljs.core.clj__GT_js(position),new cljs.core.Keyword(null,\"data\",\"data\",-232669377),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"label\",\"label\",1718410804),new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(job),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"job\",\"job\",850873087)], null),new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"backgroundColor\",\"backgroundColor\",1738438491),\"#f59e0b\",new cljs.core.Keyword(null,\"color\",\"color\",1011675173),\"white\",new cljs.core.Keyword(null,\"border\",\"border\",1444987323),\"none\",new cljs.core.Keyword(null,\"borderRadius\",\"borderRadius\",-1505621083),\"6px\",new cljs.core.Keyword(null,\"padding\",\"padding\",1660304693),\"8px 12px\",new cljs.core.Keyword(null,\"fontSize\",\"fontSize\",919623033),\"12px\"], null)], null);\n}),all_job_nodes);\nvar react_flow_collections = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__14934){\nvar map__14935 = p__14934;\nvar map__14935__$1 = cljs.core.__destructure_map(map__14935);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14935__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar position = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14935__$1,new cljs.core.Keyword(null,\"position\",\"position\",-2011731912));\nvar slug = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14935__$1,new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850));\nconsole.log(\"Collection\",slug,\"at position\",position);\n\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),id,new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),cljs.core.clj__GT_js(position),new cljs.core.Keyword(null,\"data\",\"data\",-232669377),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"label\",\"label\",1718410804),slug], null),new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"fontSize\",\"fontSize\",919623033),\"11px\",new cljs.core.Keyword(null,\"color\",\"color\",1011675173),\"#666\"], null)], null);\n}),all_collection_nodes);\nvar all_nodes = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(react_flow_jobs,react_flow_collections);\nvar all_edges = cljs.core.PersistentVector.EMPTY;\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805),all_nodes,new cljs.core.Keyword(null,\"edges\",\"edges\",-694791395),all_edges], null);\n} else {\nreturn null;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Graph builder functions - pure functions that build React Flow nodes from state","~:file","vcorpstate/graph.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$vcorpstate.graph","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.set","^O","~$cljs.core","^P","~$goog","^Q"],"~:seen",["^G",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^P","^P"],"~:form",["~#list",["~$ns","^I","Graph builder functions - pure functions that build React Flow nodes from state",["^W",["^S",["^O"]]]]],"~:flags",["^ ","^S",["^G",[]]],"~:js-deps",[],"~:deps",["^Q","^P","^O"]],"^L","^I","~:resource-id",["~:shadow.build.classpath/resource","vcorpstate/graph.cljs"],"~:compiled-at",1758776112636,"^J",["^ ","^O","^O","^P","^P","^Q","^Q"],"~:resource-name","vcorpstate/graph.cljs","~:warnings",[],"~:source","(ns vcorpstate.graph\n  \"Graph builder functions - pure functions that build React Flow nodes from state\"\n  (:require [clojure.set]))\n\n;; ====================================\n;; LAYOUT CONSTANTS\n;; ====================================\n\n(def squad-columns\n  \"Squad column layout - 7 independent vertical columns\"\n  [{:slug \"human\" :name \"Human Director\" :x 100}\n   {:slug \"pd\" :name \"Product Designer\" :x 250}\n   {:slug \"arch\" :name \"Architect\" :x 400} \n   {:slug \"fe\" :name \"FE Squad\" :x 550}\n   {:slug \"be\" :name \"BE Squad\" :x 700}\n   {:slug \"ai\" :name \"AI Squad\" :x 850}\n   {:slug \"qa\" :name \"QA Squad\" :x 1000}])\n\n(def node-colors\n  {:collection-input \"#3B82F6\"    ; Blue - input collections\n   :collection-output \"#10B981\"   ; Green - output collections  \n   :job \"#F59E0B\"                 ; Orange - jobs/processing\n   :job-completed \"#059669\"       ; Dark green - completed jobs\n   :job-paused \"#6B7280\"})        ; Gray - paused jobs\n\n;; ====================================\n;; SIMPLE TREE BUILDING ALGORITHM  \n;; ====================================\n\n;; Simple lookup maps for navigation\n(defn create-collection-lookup-maps\n  \"Create maps for easy navigation: collection → producer job, collection → consumer jobs\"\n  [squad-jobs]\n  (let [collection-to-producer (into {}\n                                    (for [job squad-jobs\n                                          output-slug (map :slug (:outputs job))]\n                                      [output-slug job]))\n        collection-to-consumers (reduce (fn [acc job]\n                                         (reduce (fn [acc2 input-slug]\n                                                  (update acc2 input-slug (fnil conj []) job))\n                                                acc (map :slug (:inputs job))))\n                                       {} squad-jobs)]\n    {:collection-to-producer collection-to-producer\n     :collection-to-consumers collection-to-consumers}))\n\n;; Simple first job detection (the key algorithm!)\n(defn find-first-jobs-in-column\n  \"Find the beginning jobs using the simple rule\"\n  [squad-jobs all-jobs-by-squad is-first-column?]\n  (let [;; Get all outputs produced by ANY job (for first column detection)\n        all-outputs-by-any-job (set (mapcat (fn [jobs] (mapcat #(map :slug (:outputs %)) jobs))\n                                           (vals all-jobs-by-squad)))]\n    (if is-first-column?\n      ;; Column 1: jobs whose inputs are NOT outputs of any other job\n      (filter (fn [job]\n               (let [input-slugs (map :slug (:inputs job))]\n                 (not-any? all-outputs-by-any-job input-slugs)))\n             squad-jobs)\n      ;; Other columns: jobs whose inputs ARE outputs from ANY other column\n      (filter (fn [job]\n               (let [input-slugs (set (map :slug (:inputs job)))]\n                 (some all-outputs-by-any-job input-slugs)))\n             squad-jobs))))\n\n;; Simple tree building by following the chain\n(defn build-simple-tree-chain\n  \"Build tree by following job → outputs → consuming jobs chain\"\n  [first-jobs lookup-maps]\n  (let [{:keys [collection-to-consumers]} lookup-maps\n        build-chain (fn build-chain-fn [job visited]\n                     (if (contains? visited (:id job))\n                       [] ; Avoid cycles\n                       (let [visited' (conj visited (:id job))\n                             outputs (map :slug (:outputs job))\n                             next-jobs (mapcat #(get collection-to-consumers % []) outputs)]\n                         (cons job (mapcat #(build-chain-fn % visited') next-jobs)))))]\n    (distinct (mapcat #(build-chain % #{}) first-jobs))))\n\n;; Position jobs and collections in workflow order\n(defn position-workflow-chain\n  \"Position jobs and collections in proper workflow order: input → job → output\"\n  [job-chain column-x]\n  (let [y-start 50\n        y-step 80]\n    (mapcat (fn [idx job]\n              (let [base-y (+ y-start (* idx y-step 3))  ; Space for input → job → output\n                    input-collections (map :slug (:inputs job))\n                    output-collections (map :slug (:outputs job))]\n                (concat\n                  ;; Input collections first\n                  (map-indexed (fn [i-idx input-slug]\n                                {:type :collection\n                                 :id (str \"collection-\" input-slug)\n                                 :position {:x column-x :y (+ base-y (* i-idx 25))}\n                                 :slug input-slug})\n                              input-collections)\n                  ;; Job in the middle\n                  [{:type :job\n                    :job job\n                    :position {:x column-x :y (+ base-y y-step)}}]\n                  ;; Output collections last  \n                  (map-indexed (fn [o-idx output-slug]\n                                {:type :collection\n                                 :id (str \"collection-\" output-slug) \n                                 :position {:x column-x :y (+ base-y (* 2 y-step) (* o-idx 25))}\n                                 :slug output-slug})\n                              output-collections))))\n            (range (count job-chain)) job-chain)))\n\n;; ====================================\n;; HELPER FUNCTIONS\n;; ====================================\n\n(defn get-squad-x-position\n  \"Get X position for a squad column\"\n  [squad-slug]\n  (-> (filter #(= (:slug %) squad-slug) squad-columns)\n      first\n      :x\n      (or 600))) ; Default fallback\n\n(defn collection-status\n  \"Calculate collection status based on documents\"\n  [collection documents]\n  (let [collection-docs (filter #(= (:document_collection_id %) (:id collection)) (vals documents))\n        total (count collection-docs)\n        completed (count (filter #(= (:status %) \"done\") collection-docs))]\n    (if (zero? total)\n      :empty\n      (if (= completed total)\n        :completed\n        :in-progress))))\n\n(defn job-visual-status\n  \"Get visual status for job (affects color)\"\n  [job]\n  (cond\n    (:completed job) :completed\n    (:paused job) :paused\n    :else :running))\n\n;; ====================================\n;; NODE BUILDERS\n;; ====================================\n\n(defn build-collection-node\n  \"Create a React Flow node for a document collection\"\n  [collection documents squads y-offset]\n  (let [status (collection-status collection documents)\n        color (if (= status :completed) \n                (:collection-output node-colors)\n                (:collection-input node-colors))]\n    {:id (str \"collection-\" (:id collection))\n     :type \"default\"\n     :position {:x 50 :y y-offset}\n     :data {:label (:name collection)\n            :description (:description collection)\n            :type :collection\n            :collection-id (:id collection)\n            :slug (:slug collection)\n            :status status}\n     :style {:backgroundColor color\n             :color \"white\"\n             :border \"none\"\n             :borderRadius \"6px\"\n             :padding \"8px 12px\"\n             :fontSize \"12px\"\n             :fontWeight \"500\"}}))\n\n(defn build-job-node\n  \"Create a React Flow node for a job - new simplified version\"\n  [job roles squads position]\n  (let [role (get roles (:role job))\n        squad-slug (or (:squad_slug role) \"arch\")\n        visual-status (job-visual-status job)\n        color (get node-colors (keyword (str \"job-\" (name visual-status))) (:job node-colors))]\n    {:id (str \"job-\" (:id job))\n     :type \"default\"\n     :position position\n     :data {:label (:name job)\n            :description (:description job)\n            :type :job\n            :job-id (:id job)\n            :role (:role job)\n            :slug (:slug job)\n            :squad squad-slug\n            :status visual-status}\n     :style {:backgroundColor color\n             :color \"white\"\n             :border \"none\"\n             :borderRadius \"6px\"\n             :padding \"8px 12px\"\n             :fontSize \"12px\"\n             :fontWeight \"500\"}}))\n\n\n;; ====================================\n;; SIMPLE COLUMN BUILDER\n;; ====================================\n\n(defn build-simple-column\n  \"Build column using the simple chain algorithm\"\n  [squad-slug squad-jobs all-jobs-by-squad column-x is-first-column?]\n  (when (not-empty squad-jobs)\n    (let [;; 1. Find first jobs using the simple rule\n          first-jobs (find-first-jobs-in-column squad-jobs all-jobs-by-squad is-first-column?)\n          ;; 2. Create lookup maps for navigation\n          lookup-maps (create-collection-lookup-maps squad-jobs)\n          \n          ;; 3. Build chain by following job → outputs → consuming jobs\n          job-chain (build-simple-tree-chain first-jobs lookup-maps)\n          \n          ;; 4. Position jobs and collections in workflow order: input → job → output  \n          workflow-nodes (position-workflow-chain job-chain column-x)\n          \n          ;; 5. Separate jobs and collections\n          job-nodes (filter #(= (:type %) :job) workflow-nodes)\n          collection-nodes (filter #(= (:type %) :collection) workflow-nodes)\n          \n          result {:job-nodes job-nodes\n                  :collection-nodes collection-nodes\n                  :job-chain job-chain\n                  :output-slugs (set (mapcat #(map :slug (:outputs %)) job-chain))}]\n      \n      result)))\n\n(defn build-graph-data\n  \"Build React Flow graph using simple column algorithm\"\n  [collections documents jobs squads roles]\n  (when (and collections jobs)\n    (js/console.log \"=== BUILD GRAPH DEBUG ===\")\n    (js/console.log \"Total jobs:\" (count (vals jobs)))\n    (js/console.log \"Total collections:\" (count (vals collections)))\n    (let [;; Group jobs by squad (simple)\n          jobs-by-squad (group-by (fn [job] \n                                   (let [role-key (:role job)\n                                         role (get roles role-key)]\n                                     (or (:squad_slug role) \"unknown\"))) \n                                 (vals jobs))\n          ;; Build each column independently (no need to pass outputs between them)\n          _ (js/console.log \"Jobs grouped by squad:\" (clj->js jobs-by-squad))\n          column-results (map (fn [{:keys [slug x]}]\n                               (let [is-first? (= slug \"human\")  ; First column\n                                     squad-jobs (get jobs-by-squad slug [])]\n                                 (js/console.log \"Building column\" slug \"with\" (count squad-jobs) \"jobs at x=\" x)\n                                 (build-simple-column slug squad-jobs jobs-by-squad x is-first?)))\n                             squad-columns)\n          _ (js/console.log \"Column results:\" (clj->js (remove nil? column-results)))\n          \n          ;; Combine all nodes\n          all-job-nodes (mapcat :job-nodes (remove nil? column-results))\n          all-collection-nodes (mapcat :collection-nodes (remove nil? column-results))\n          \n          ;; Convert to React Flow format\n          react-flow-jobs (map-indexed (fn [idx {:keys [job position]}]\n                                (js/console.log \"Job\" (:slug job) \"at position\" position)\n                                {:id (str \"job-\" (:id job))\n                                 :type \"default\"\n                                 :position (clj->js position)  ; Convert ClojureScript to JavaScript!\n                                 :data {:label (:name job) :type :job}\n                                 :style {:backgroundColor \"#f59e0b\" :color \"white\" \n                                        :border \"none\" :borderRadius \"6px\"\n                                        :padding \"8px 12px\" :fontSize \"12px\"}})\n                              all-job-nodes)\n          react-flow-collections (map (fn [{:keys [id position slug]}]\n                                       (js/console.log \"Collection\" slug \"at position\" position)\n                                       {:id id :position (clj->js position) :data {:label slug}\n                                        :style {:fontSize \"11px\" :color \"#666\"}}) \n                                     all-collection-nodes)\n          \n          all-nodes (concat react-flow-jobs react-flow-collections)\n          all-edges []] ; Simple for now - no edges\n      \n      {:nodes all-nodes\n       :edges all-edges})))","~:reader-features",["^G",["~:cljs"]],"~:used-var-namespaces",["^G",["^I","^P","~$js"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["vcorpstate.graph/squad-columns","vcorpstate.graph/node-colors","vcorpstate.graph/create-collection-lookup-maps","squad-jobs","collection-to-producer","cljs.core.into","iter__5480__auto__","s__14914","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","cljs.core/first","iterys__5476__auto__","s__14916","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__14918","cljs.core/chunk-buffer","i__14917","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__14915","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5477__auto__","cljs.core.concat","iter__14913","job","output-slug","cljs.core.map","collection-to-consumers","cljs.core.reduce","acc","acc2","input-slug","cljs.core.update","cljs.core.fnil","cljs.core/conj","vcorpstate.graph/find-first-jobs-in-column","all-jobs-by-squad","is-first-column?","all-outputs-by-any-job","cljs.core/set","cljs.core.mapcat","jobs","p1__14919#","cljs.core/vals","cljs.core.filter","input-slugs","cljs.core/not-any?","cljs.core/some","vcorpstate.graph/build-simple-tree-chain","first-jobs","lookup-maps","map__14923","cljs.core/--destructure-map","cljs.core.get","build-chain","visited","cljs.core/contains?","visited'","cljs.core.conj","outputs","next-jobs","p1__14920#","p1__14921#","build-chain-fn","cljs.core.distinct","p1__14922#","vcorpstate.graph/position-workflow-chain","job-chain","column-x","y-start","y-step","idx","base-y","input-collections","output-collections","cljs.core.map_indexed","i-idx","o-idx","cljs.core.range","vcorpstate.graph/get-squad-x-position","squad-slug","p1__14924#","cljs.core._EQ_","or__5002__auto__","vcorpstate.graph/collection-status","collection","documents","collection-docs","p1__14925#","total","completed","p1__14926#","vcorpstate.graph/job-visual-status","vcorpstate.graph/build-collection-node","squads","y-offset","status","color","vcorpstate.graph/build-job-node","roles","position","role","visual-status","cljs.core.keyword","cljs.core/name","vcorpstate.graph/build-simple-column","cljs.core/not-empty","workflow-nodes","job-nodes","p1__14927#","collection-nodes","p1__14928#","result","p1__14929#","vcorpstate.graph/build-graph-data","collections","and__5000__auto__","js/console.log","jobs-by-squad","cljs.core/group-by","role-key","_","cljs.core/clj->js","column-results","p__14930","map__14931","slug","x","is-first?","cljs.core.remove","cljs.core/nil?","all-job-nodes","all-collection-nodes","react-flow-jobs","p__14932","map__14933","react-flow-collections","p__14934","map__14935","id","all-nodes","all-edges","cljs.core/chunk-first"]],"~:used-vars",["^G",["~$cljs.core/mapcat","~$cljs.core/--destructure-map","~$vcorpstate.graph/create-collection-lookup-maps","~$cljs.core/rest","~$vcorpstate.graph/position-workflow-chain","~$cljs.core/keyword","~$vcorpstate.graph/build-job-node","~$vcorpstate.graph/find-first-jobs-in-column","~$cljs.core/filter","~$cljs.core/=","~$cljs.core/not-any?","~$cljs.core/count","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/group-by","~$cljs.core/chunk","~$cljs.core/distinct","~$cljs.core/LazySeq","~$cljs.core/chunk-rest","~$vcorpstate.graph/collection-status","~$cljs.core/concat","~$cljs.core/set","~$vcorpstate.graph/job-visual-status","~$cljs.core/fnil","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/conj","~$cljs.core/update","~$cljs.core/map","~$vcorpstate.graph/get-squad-x-position","~$cljs.core/vals","~$cljs.core/get","~$cljs.core/chunk-append","~$cljs.core/-nth","~$cljs.core/remove","~$vcorpstate.graph/build-collection-node","~$cljs.core/not-empty","~$cljs.core/clj->js","~$cljs.core/nil?","~$js/console.log","~$cljs.core/chunk-cons","~$cljs.core/cons","~$cljs.core/chunk-buffer","~$cljs.core/map-indexed","~$vcorpstate.graph/build-simple-tree-chain","~$cljs.core/range","~$vcorpstate.graph/node-colors","~$vcorpstate.graph/build-graph-data","~$cljs.core/first","~$vcorpstate.graph/build-simple-column","~$cljs.core/name","~$vcorpstate.graph/squad-columns","~$cljs.core/some","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["^11","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^G",[]],"~:deps-syms",["^Q","~$goog.dom.HtmlElement"]]],["^11","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q"]]],["^11","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^11","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^2S","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^2T"]]],["^11","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^2S"]]],["^11","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q"]]],["^11","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q"]]],["^11","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q"]]],["^11","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^2Q","^2T"]]],["^11","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q"]]],["^11","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q"]]],["^11","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^2S"]]],"~:SHADOW-TIMESTAMP",[1758661687000,1758661687000,1758661685000],["^11","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^2S","~$goog.reflect"]]],["^11","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^2S","~$goog.fs.blob","^2W","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2Y","^2Z"]]],["^11","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q"]]],["^11","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q"]]],["^11","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^2Y","~$goog.html.SafeUrl","^2Z","^2S","^2T"]]],["^11","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^2S","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^32","~$goog.html.SafeStyle","^34","^2X","~$goog.html.uncheckedconversions","^2Y","^2T"]]],["^11","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","~$goog.dom.TagName","^2S","~$goog.dom.element"]]],["^11","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^2Y","^32","^39","~$goog.html.SafeStyleSheet","^34","^3;","^2X","^2Z","^2S","~$goog.labs.userAgent.browser","~$goog.array","~$goog.object","^2T","~$goog.dom.tags","^33"]]],["^11","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^3@"]]],["^11","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q"]]],["^11","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^11","vcorpstate/graph.cljs"],["a9d7671489fa3e818002ed71caaede67034306a2","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^P","^O"]]],["^11","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^3?","^2S","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^11","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^2R"]]],["^11","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q"]]],["^11","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q"]]],["^11","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",[]]],["^11","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^3?","^3@"]]],["^11","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","~$goog.dom.safe","^3:","^2Y","^2T"]]],["^11","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q"]]],["^11","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^2T","^2V"]]],["^11","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q"]]],["^11","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","~$goog.flags"]]],["^11","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^3C","^3;"]]],["^11","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^2S","^38","^32","^39","^3=","^34","^2X","^2Y","^2T"]]],["^11","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q"]]],["^11","cljs/core.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","~$goog.math.Long","~$goog.math.Integer","^3E","^3@","^3?","~$goog.Uri","~$goog.string.StringBuffer"]]],["^11","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^2Y","^2Z","^33","^2S"]]],["^11","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^2Y","^39","^2Z","^3@","^2S","^2T"]]],["^11","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^30"]]],["^11","clojure/set.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^P"]]],["^11","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^2S","^3E"]]],["^11","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2L",["^ ","^2M",null,"^2N",["^G",[]],"^2O",["^Q","^2S","^2Z"]]]]],"~:clj-info",["^ ","jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes.cljc",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl.cljc",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/core.cljc",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer.cljc",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/data/json.clj",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64.clj",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map.clj",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader.clj",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/util.cljc",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/env.cljc",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/compiler.cljc",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64_vlq.clj",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/externs.clj",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes/and_or.cljc",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl/namespaces.cljc",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/js_deps.cljc",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/instant.clj",1758661685000,"jar:file:/Users/davidcerezo/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/tagged_literals.cljc",1758661685000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Graph builder functions - pure functions that build React Flow nodes from state","^7","vcorpstate/graph.cljs","^8",1,"^9",5,"^:",1,"^;",21],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",null,"^F",["^G",[]],"^H","^I","^J",["^ "],"^M",null,"^N",["^ ","^O","^O","^P","^P","^Q","^Q"],"^R",["^G",["^S"]],"^T",null,"~:defs",["^ ","~$build-collection-node",["^ ","~:protocol-inline",null,"^5",["^ ","^7","vcorpstate/graph.cljs","^8",146,"^9",7,"^:",146,"^;",28,"~:arglists",["^W",["~$quote",["^W",[["~$collection","~$documents","~$squads","~$y-offset"]]]]],"^6","Create a React Flow node for a document collection"],"^H","^27","^7","vcorpstate/graph.cljs","^;",28,"~:method-params",["^W",[["^4H","^4I","^4J","^4K"]]],"~:protocol-impl",null,"~:arglists-meta",["^W",[null,null]],"^9",1,"~:variadic?",false,"^8",146,"~:ret-tag","~$cljs.core/IMap","^:",146,"~:max-fixed-arity",4,"~:fn-var",true,"^4F",["^W",["^4G",["^W",[["^4H","^4I","^4J","^4K"]]]]],"^6","Create a React Flow node for a document collection"],"~$get-squad-x-position",["^ ","^4E",null,"^5",["^ ","^7","vcorpstate/graph.cljs","^8",114,"^9",7,"^:",114,"^;",27,"^4F",["^W",["^4G",["^W",[["~$squad-slug"]]]]],"^6","Get X position for a squad column"],"^H","^21","^7","vcorpstate/graph.cljs","^;",27,"^4L",["^W",[["^4U"]]],"^4M",null,"^4N",["^W",[null,null]],"^9",1,"^4O",false,"^8",114,"^4P",["^G",["~$any","~$number"]],"^:",114,"^4R",1,"^4S",true,"^4F",["^W",["^4G",["^W",[["^4U"]]]]],"^6","Get X position for a squad column"],"~$collection-status",["^ ","^4E",null,"^5",["^ ","^7","vcorpstate/graph.cljs","^8",122,"^9",7,"^:",122,"^;",24,"^4F",["^W",["^4G",["^W",[["^4H","^4I"]]]]],"^6","Calculate collection status based on documents"],"^H","^1S","^7","vcorpstate/graph.cljs","^;",24,"^4L",["^W",[["^4H","^4I"]]],"^4M",null,"^4N",["^W",[null,null]],"^9",1,"^4O",false,"^8",122,"^4P","~$cljs.core/Keyword","^:",122,"^4R",2,"^4S",true,"^4F",["^W",["^4G",["^W",[["^4H","^4I"]]]]],"^6","Calculate collection status based on documents"],"~$node-colors",["^ ","^H","^2B","^7","vcorpstate/graph.cljs","^8",19,"^9",1,"^:",19,"^;",17,"^5",["^ ","^7","vcorpstate/graph.cljs","^8",19,"^9",6,"^:",19,"^;",17],"~:tag","^4Q"],"~$build-graph-data",["^ ","^4E",null,"^5",["^ ","^7","vcorpstate/graph.cljs","^8",227,"^9",7,"^:",227,"^;",23,"^4F",["^W",["^4G",["^W",[["~$collections","^4I","~$jobs","^4J","~$roles"]]]]],"^6","Build React Flow graph using simple column algorithm"],"^H","^2C","^7","vcorpstate/graph.cljs","^;",23,"^4L",["^W",[["^51","^4I","^52","^4J","^53"]]],"^4M",null,"^4N",["^W",[null,null]],"^9",1,"^4O",false,"^8",227,"^4P",["^G",["^4Q","~$clj-nil"]],"^:",227,"^4R",5,"^4S",true,"^4F",["^W",["^4G",["^W",[["^51","^4I","^52","^4J","^53"]]]]],"^6","Build React Flow graph using simple column algorithm"],"~$build-simple-column",["^ ","^4E",null,"^5",["^ ","^7","vcorpstate/graph.cljs","^8",201,"^9",7,"^:",201,"^;",26,"^4F",["^W",["^4G",["^W",[["^4U","~$squad-jobs","~$all-jobs-by-squad","~$column-x","~$is-first-column?"]]]]],"^6","Build column using the simple chain algorithm"],"^H","^2E","^7","vcorpstate/graph.cljs","^;",26,"^4L",["^W",[["^4U","^56","^57","^58","^59"]]],"^4M",null,"^4N",["^W",[null,null]],"^9",1,"^4O",false,"^8",201,"^4P",["^G",["^4Q","^54"]],"^:",201,"^4R",5,"^4S",true,"^4F",["^W",["^4G",["^W",[["^4U","^56","^57","^58","^59"]]]]],"^6","Build column using the simple chain algorithm"],"~$squad-columns",["^ ","^5",["^ ","^7","vcorpstate/graph.cljs","^8",9,"^9",6,"^:",9,"^;",19],"^H","^2G","^7","vcorpstate/graph.cljs","^;",19,"^9",1,"^8",9,"^:",9,"^4[","~$cljs.core/IVector","^6","Squad column layout - 7 independent vertical columns"],"~$create-collection-lookup-maps",["^ ","^4E",null,"^5",["^ ","^7","vcorpstate/graph.cljs","^8",31,"^9",7,"^:",31,"^;",36,"^4F",["^W",["^4G",["^W",[["^56"]]]]],"^6","Create maps for easy navigation: collection → producer job, collection → consumer jobs"],"^H","^1A","^7","vcorpstate/graph.cljs","^;",36,"^4L",["^W",[["^56"]]],"^4M",null,"^4N",["^W",[null,null]],"^9",1,"^4O",false,"^8",31,"^4P","^4Q","^:",31,"^4R",1,"^4S",true,"^4F",["^W",["^4G",["^W",[["^56"]]]]],"^6","Create maps for easy navigation: collection → producer job, collection → consumer jobs"],"~$build-job-node",["^ ","^4E",null,"^5",["^ ","^7","vcorpstate/graph.cljs","^8",170,"^9",7,"^:",170,"^;",21,"^4F",["^W",["^4G",["^W",[["~$job","^53","^4J","~$position"]]]]],"^6","Create a React Flow node for a job - new simplified version"],"^H","^1E","^7","vcorpstate/graph.cljs","^;",21,"^4L",["^W",[["^5>","^53","^4J","^5?"]]],"^4M",null,"^4N",["^W",[null,null]],"^9",1,"^4O",false,"^8",170,"^4P","^4Q","^:",170,"^4R",4,"^4S",true,"^4F",["^W",["^4G",["^W",[["^5>","^53","^4J","^5?"]]]]],"^6","Create a React Flow node for a job - new simplified version"],"~$find-first-jobs-in-column",["^ ","^4E",null,"^5",["^ ","^7","vcorpstate/graph.cljs","^8",47,"^9",7,"^:",47,"^;",32,"^4F",["^W",["^4G",["^W",[["^56","^57","^59"]]]]],"^6","Find the beginning jobs using the simple rule"],"^H","^1F","^7","vcorpstate/graph.cljs","^;",32,"^4L",["^W",[["^56","^57","^59"]]],"^4M",null,"^4N",["^W",[null,null]],"^9",1,"^4O",false,"^8",47,"^4P","^1Q","^:",47,"^4R",3,"^4S",true,"^4F",["^W",["^4G",["^W",[["^56","^57","^59"]]]]],"^6","Find the beginning jobs using the simple rule"],"~$build-simple-tree-chain",["^ ","^4E",null,"^5",["^ ","^7","vcorpstate/graph.cljs","^8",66,"^9",7,"^:",66,"^;",30,"^4F",["^W",["^4G",["^W",[["~$first-jobs","~$lookup-maps"]]]]],"^6","Build tree by following job → outputs → consuming jobs chain"],"^H","^2@","^7","vcorpstate/graph.cljs","^;",30,"^4L",["^W",[["^5B","^5C"]]],"^4M",null,"^4N",["^W",[null,null]],"^9",1,"^4O",false,"^8",66,"^4P","^1Q","^:",66,"^4R",2,"^4S",true,"^4F",["^W",["^4G",["^W",[["^5B","^5C"]]]]],"^6","Build tree by following job → outputs → consuming jobs chain"],"~$job-visual-status",["^ ","^4E",null,"^5",["^ ","^7","vcorpstate/graph.cljs","^8",134,"^9",7,"^:",134,"^;",24,"^4F",["^W",["^4G",["^W",[["^5>"]]]]],"^6","Get visual status for job (affects color)"],"^H","^1V","^7","vcorpstate/graph.cljs","^;",24,"^4L",["^W",[["^5>"]]],"^4M",null,"^4N",["^W",[null,null]],"^9",1,"^4O",false,"^8",134,"^4P","^4Y","^:",134,"^4R",1,"^4S",true,"^4F",["^W",["^4G",["^W",[["^5>"]]]]],"^6","Get visual status for job (affects color)"],"~$position-workflow-chain",["^ ","^4E",null,"^5",["^ ","^7","vcorpstate/graph.cljs","^8",80,"^9",7,"^:",80,"^;",30,"^4F",["^W",["^4G",["^W",[["~$job-chain","^58"]]]]],"^6","Position jobs and collections in proper workflow order: input → job → output"],"^H","^1C","^7","vcorpstate/graph.cljs","^;",30,"^4L",["^W",[["^5F","^58"]]],"^4M",null,"^4N",["^W",[null,null]],"^9",1,"^4O",false,"^8",80,"^4P","^4V","^:",80,"^4R",2,"^4S",true,"^4F",["^W",["^4G",["^W",[["^5F","^58"]]]]],"^6","Position jobs and collections in proper workflow order: input → job → output"]],"^U",["^ ","^P","^P"],"~:cljs.analyzer/constants",["^ ","^R",["^G",["~:y","~:role","~:description","~:paused","~:job-completed","~:slug","~:job-chain","~:squad","~:color","~:borderRadius","~:in-progress","~:collection-id","~:else","~:job-id","~:collection-nodes","~:job-paused","^H","~:document_collection_id","~:completed","~:type","~:empty","~:collection-input","~:running","~:style","~:inputs","~:collection-to-consumers","~:collection-output","~:nodes","~:job-nodes","~:status","~:squad_slug","~:label","~:id","~:padding","~:fontWeight","~:outputs","~:position","~:output-slugs","~:x","~:fontSize","~:collection-to-producer","~:border","~:backgroundColor","~:collection","~:edges","~:job","~:data"]],"~:order",["^5L","^H","~:x","^5[","^64","^6F","^5K","^5V","^6=","^62","^6A","^63","^6:","^5Y","^6>","^6D","~:y","^5W","^67","^5Z","^5X","^5Q","^5J","^5S","^60","^6G","^61","^69","^5I","^5R","^6C","^5O","^6B","^5P","^6;","^6@","^6<","^5H","^68","^5T","^5N","^66","^5U","^5M","^6?","^65","^6E"]],"^Y",["^ ","^S",["^G",[]]],"^Z",[],"^[",["^Q","^P","^O"]],"^L","^I","~:ns-specs",["^ "],"~:ns-spec-vars",["^G",[]],"~:compiler-options",["^2K",[["^6K","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^6K","~:shadow-tweaks"],null,["^6K","~:source-map-inline"],null,["^6K","~:shadow-optimize-constants"],null,["^6K","~:elide-asserts"],false,["^6K","~:optimize-constants"],null,["^6K","^14"],null,["^6K","~:external-config"],null,["^6K","~:tooling-config"],null,["^6K","~:emit-constants"],null,["^6K","~:load-tests"],null,["^6K","~:form-size-threshold"],null,["^6K","~:global-goog-object&array"],null,["^6K","~:data-readers"],null,["~:shadow.build/config","~:target"],"~:browser",["^6K","~:infer-externs"],"~:auto",["^6K","^16"],null,["^6M","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6K","~:fn-invoke-direct"],null,["^6K","~:source-map"],"/dev/null"]]]